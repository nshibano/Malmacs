(* syntax highlighting for FsMiniMAL *)

type token = Lower | Upper | Literal | Eof | Keyword | Comment | Lparen | Rparen | Colon;

lex {
  val letter = ['a'-'z' 'A'-'Z'];
  val digit = ['0'-'9'];
  fun token =
    "fun"|"val"|"var"|"if"|"then"|
    "while"|"case"|"begin"|"end"|
    "type"|"of"|"else"|"for"|"to"|"do" { Keyword }
    ['a'-'z'] (letter|digit|'_')* { Lower }
    ['A'-'Z'] (letter|digit|'_')* { Upper }
    digit (letter|digit)* |         
    '\'' _ '\'' |
    "'\\''" |
    "'\\" letter "'"              { Literal }
    '"'                           { string lexbuf.lbStartPos lexbuf }
    "(*"                          { comment lexbuf.lbStartPos 1 lexbuf }
    "//"                          { eolComment lexbuf.lbStartPos lexbuf }
    eof                           { Eof }
    "("                           { Lparen }
    ")"                           { Rparen }
    ":"                           { Colon }
    _                             { token lexbuf }
  and string st =
    '"' | eof { (lexbuf.lbStartPos <- st; Literal) }
    _         { string st lexbuf }
  and comment st level =
    "*)" | eof { if level = 1 then (lexbuf.lbStartPos <- st; Comment ) else comment st (level - 1) lexbuf }
    "(*" { comment st (level + 1) lexbuf }
    _    { comment st level lexbuf }
  and eolComment st =
    "\r\n"| "\n" | "\r" | eof { (lexbuf.lbStartPos <- st; Comment) }
    _                         { eolComment st lexbuf }};

val ciDefault = { ciForeColor = None, ciBackColor = None, ciUnderlineColor = None, ciText = None };
val ciError = { ciDefault with ciUnderlineColor = Some (colorOfRgb 0xFF0000) };
val ciHighlighted = { ciDefault with ciForeColor = Some (colorOfRgb 0x00FF00), ciBackColor = Some (colorOfRgb 0x000000) };

fun getLastSymbolRange (s : string) =
  begin
    val len = stringLength s;
    if len = 0 then (0, 0)
    else if s.[len - 2] = '\r' && s.[len - 1] = '\n' then
      (len - 2, len)
    else (len - 1, len)
  end

fun highlightMal (s : string) (accu : colorInfo array) =
  begin
    val lb = lexbufCreate s;
    var state = None;
    fun set rgb =
      begin
        val ci = { ciDefault with ciForeColor = Some (colorOfRgb rgb) };
        for i = lb.lbStartPos to lb.lbEndPos - 1 do
          accu.[i] <- ci;
      end;
    while not lb.lbEof do
        case token lb of
          | Lower ->
            (case state of
              | None -> set 0xD00000
              | Some _ -> set 0x800080)
          | Upper ->  set 0x0000D0
          | Literal -> set 0x808000
          | Keyword -> set 0x008000
          | Comment -> set 0x808080
          | Colon -> (case state of None -> state <- Some 0 | _ -> ())
          | Rparen -> (case state of None -> () | Some 0 -> state <- None | Some n -> state <- Some (n - 1))
          | Lparen -> (case state of None -> () | Some n -> state <- Some (n + 1))
          | Eof -> ();
    case malTypecheck s of
    | Some (msg, (st, ed)) ->
      begin
        val len = stringLength s;
            if st = len then
              begin
                val st, ed = getLastSymbolRange s;
                for i = st to ed - 1 do
                  accu.[i] <- { accu.[i] with ciUnderlineColor = Some (colorOfRgb 0xFF0000), ciText = Some msg }
              end
            else
              for i = st to ed - 1 do
                accu.[i] <- { accu.[i] with ciUnderlineColor = Some (colorOfRgb 0xFF0000), ciText = Some msg }
      end
    | None -> ()
  end;

val highlightingKeywords = [||];

fun highlightKeyword (keyword : string) (ci : colorInfo) (text : string) (colors : colorInfo array) =
    begin
        val keyLen = stringLength keyword;
        var i = stringIndexOf text keyword 0;
        while i <> -1 do
            begin
              arrayFill colors i keyLen ci;
              i <- stringIndexOf text keyword (i + (stringLength keyword));
            end;
    end;

malproc <-
  (fn (msg : message) ->
    case msg of
    | MhighlightingRequired editor ->
        begin
            sei();
            val filename = editorGetFilename editor;
            val extension = stringToLower (pathGetExtension filename);
            val s = editorGetText editor;
            val accu = arrayCreate (stringLength s) ciDefault;
            if extension = ".mal" then
                highlightMal s accu;
            for i = 0 to arrayLength highlightingKeywords - 1 do
                highlightKeyword highlightingKeywords.[i] ciHighlighted s accu;
            editorSetColor editor accu
        end);

fun initiateHighlighting() = arrayIter editorInitiateHighlighting (getEditors());

fun hlt (keyword : string) =
    begin
        highlightingKeywords << keyword;
        initiateHighlighting()
    end;

fun clr() =
    begin
        arrayClear highlightingKeywords;
        initiateHighlighting()
    end;

initiateHighlighting()