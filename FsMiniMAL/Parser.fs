// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64"

open FsMiniMAL
open Syntax
open ParseHelper

type token = 
  | IDENT of string
  | QUOTED of string
  | COMPARE of string
  | CONCAT of string
  | ADDITIVE of string
  | SUBTRACTIVE of string
  | MULTDIV of string
  | UNARY of string
  | INT of string
  | CHAR of char
  | FLOAT of float
  | STRING of string
  | EOF
  | EQUAL
  | EQUALEQUAL
  | AMPAMP
  | LPAREN
  | RPAREN
  | STAR
  | STARSTAR
  | COMMA
  | MINUSGREATER
  | DOT
  | COLON
  | COLONCOLON
  | SEMI
  | LBRACKET
  | LBRACKETBAR
  | LESSMINUS
  | COLONEQUAL
  | LESSLESS
  | RBRACKET
  | UNDERSCORE
  | LBRACE
  | BAR
  | BARBAR
  | BARRBRACKET
  | RBRACE
  | EXCLAMATION
  | QMARK
  | AND
  | AS
  | BEGIN
  | CASE
  | CATCH
  | DO
  | DOWNTO
  | ELSE
  | END
  | EXCEPTION
  | FOR
  | FN
  | FUN
  | FUNCT
  | HIDE
  | IF
  | LEX
  | MUTABLE
  | OF
  | REMOVE
  | THEN
  | TO
  | TRY
  | TYPE
  | VAL
  | VAR
  | WHEN
  | WHILE
  | WITH

let tagOfToken (t : token) = 
  match t with
  | IDENT _ -> 0 
  | QUOTED _ -> 1 
  | COMPARE _ -> 2 
  | CONCAT _ -> 3 
  | ADDITIVE _ -> 4 
  | SUBTRACTIVE _ -> 5 
  | MULTDIV _ -> 6 
  | UNARY _ -> 7 
  | INT _ -> 8 
  | CHAR _ -> 9 
  | FLOAT _ -> 10 
  | STRING _ -> 11 
  | EOF  -> 12 
  | EQUAL  -> 13 
  | EQUALEQUAL  -> 14 
  | AMPAMP  -> 15 
  | LPAREN  -> 16 
  | RPAREN  -> 17 
  | STAR  -> 18 
  | STARSTAR  -> 19 
  | COMMA  -> 20 
  | MINUSGREATER  -> 21 
  | DOT  -> 22 
  | COLON  -> 23 
  | COLONCOLON  -> 24 
  | SEMI  -> 25 
  | LBRACKET  -> 26 
  | LBRACKETBAR  -> 27 
  | LESSMINUS  -> 28 
  | COLONEQUAL  -> 29 
  | LESSLESS  -> 30 
  | RBRACKET  -> 31 
  | UNDERSCORE  -> 32 
  | LBRACE  -> 33 
  | BAR  -> 34 
  | BARBAR  -> 35 
  | BARRBRACKET  -> 36 
  | RBRACE  -> 37 
  | EXCLAMATION  -> 38 
  | QMARK  -> 39 
  | AND  -> 40 
  | AS  -> 41 
  | BEGIN  -> 42 
  | CASE  -> 43 
  | CATCH  -> 44 
  | DO  -> 45 
  | DOWNTO  -> 46 
  | ELSE  -> 47 
  | END  -> 48 
  | EXCEPTION  -> 49 
  | FOR  -> 50 
  | FN  -> 51 
  | FUN  -> 52 
  | FUNCT  -> 53 
  | HIDE  -> 54 
  | IF  -> 55 
  | LEX  -> 56 
  | MUTABLE  -> 57 
  | OF  -> 58 
  | REMOVE  -> 59 
  | THEN  -> 60 
  | TO  -> 61 
  | TRY  -> 62 
  | TYPE  -> 63 
  | VAL  -> 64 
  | VAR  -> 65 
  | WHEN  -> 66 
  | WHILE  -> 67 
  | WITH  -> 68 

let endOfInputTag = 71 

let dataOfToken (t : token) : obj = 
  match t with 
  | IDENT x -> box x 
  | QUOTED x -> box x 
  | COMPARE x -> box x 
  | CONCAT x -> box x 
  | ADDITIVE x -> box x 
  | SUBTRACTIVE x -> box x 
  | MULTDIV x -> box x 
  | UNARY x -> box x 
  | INT x -> box x 
  | CHAR x -> box x 
  | FLOAT x -> box x 
  | STRING x -> box x 
  | EOF  -> null 
  | EQUAL  -> null 
  | EQUALEQUAL  -> null 
  | AMPAMP  -> null 
  | LPAREN  -> null 
  | RPAREN  -> null 
  | STAR  -> null 
  | STARSTAR  -> null 
  | COMMA  -> null 
  | MINUSGREATER  -> null 
  | DOT  -> null 
  | COLON  -> null 
  | COLONCOLON  -> null 
  | SEMI  -> null 
  | LBRACKET  -> null 
  | LBRACKETBAR  -> null 
  | LESSMINUS  -> null 
  | COLONEQUAL  -> null 
  | LESSLESS  -> null 
  | RBRACKET  -> null 
  | UNDERSCORE  -> null 
  | LBRACE  -> null 
  | BAR  -> null 
  | BARBAR  -> null 
  | BARRBRACKET  -> null 
  | RBRACE  -> null 
  | EXCLAMATION  -> null 
  | QMARK  -> null 
  | AND  -> null 
  | AS  -> null 
  | BEGIN  -> null 
  | CASE  -> null 
  | CATCH  -> null 
  | DO  -> null 
  | DOWNTO  -> null 
  | ELSE  -> null 
  | END  -> null 
  | EXCEPTION  -> null 
  | FOR  -> null 
  | FN  -> null 
  | FUN  -> null 
  | FUNCT  -> null 
  | HIDE  -> null 
  | IF  -> null 
  | LEX  -> null 
  | MUTABLE  -> null 
  | OF  -> null 
  | REMOVE  -> null 
  | THEN  -> null 
  | TO  -> null 
  | TRY  -> null 
  | TYPE  -> null 
  | VAL  -> null 
  | VAR  -> null 
  | WHEN  -> null 
  | WHILE  -> null 
  | WITH  -> null 

let reductionSymbolCounts = [|1us; 2us; 2us; 0us; 3us; 3us; 1us; 1us; 0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 4us; 4us; 2us; 4us; 2us; 4us; 2us; 2us; 4us; 2us; 3us; 1us; 1us; 3us; 1us; 4us; 3us; 7us; 5us; 6us; 4us; 4us; 8us; 5us; 5us; 3us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 5us; 3us; 3us; 3us; 3us; 3us; 3us; 5us; 1us; 0us; 2us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 4us; 0us; 2us; 3us; 1us; 5us; 3us; 1us; 1us; 1us; 3us; 1us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 3us; 5us; 3us; 3us; 3us; 1us; 0us; 5us; 3us; 3us; 1us; 3us; 1us; 1us; 1us; 2us; 6us; 3us; 3us; 1us; 3us; 1us; 3us; 3us; 4us; 2us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 0us; 3us; 1us; 0us; 3us; 1us; 0us; 3us; 4us; 2us; 3us; 1us; 0us; 2us; 1us; 2us; 2us; 2us; 1us; 1us; 1us; 1us; 3us; 3us; 4us; 2us; 1us; 1us; 3us; 1us; 3us; 4us; 0us; 2us; 0us; 2us; 4us|]
let productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 11us; 11us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 21us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; 26us; 26us; 27us; 28us; 28us; 29us; 29us; 30us; 30us; 31us; 31us; 32us; 32us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 34us; 34us; 35us; 35us; 36us; 36us; 37us; 37us; 38us; 38us; 38us; 38us; 38us; 39us; 39us; 40us; 40us; 41us; 42us; 42us; 42us; 43us; 43us; 44us; 44us; 45us; 45us; 46us; 47us; 47us; 48us; 48us; 48us; 49us; 49us; 50us; 50us; 51us; 51us; 52us; 52us; 52us; 53us; 53us; 54us; 54us; 54us; 54us; 54us; 54us; 54us; 54us; 54us; 54us; 55us; 55us; 56us; 56us; 57us; 57us; 58us; 59us; 59us; 60us; 60us; 61us|]
let maxProductionBodyLength = 8
let actionTable_buckets = [| 0s; -1s; -1s; -1s; -1s; 2s; 3s; 4s; 6s; 8s; 9s; 10s; 12s; 14s; -1s; -1s; 15s; 16s; -1s; -1s; -1s; -1s; 17s; 18s; -1s; -1s; 19s; 20s; 21s; -1s; -1s; -1s; -1s; 22s; -1s; -1s; -1s; -1s; 23s; 24s; -1s; -1s; 25s; 26s; 27s; 28s; 29s; 30s; 31s; 32s; 34s; 36s; 37s; 38s; 39s; 40s; 42s; -1s; -1s; 43s; -1s; -1s; 44s; 45s; 46s; 47s; 49s; 50s; -1s; -1s; 51s; 52s; 53s; 54s; 55s; 56s; 57s; 59s; 60s; -1s; -1s; -1s; -1s; -1s; 61s; 62s; 64s; -1s; -1s; 65s; 66s; -1s; 68s; 69s; 71s; 72s; 74s; 75s; -1s; 76s; 77s; 79s; -1s; -1s; -1s; -1s; 81s; -1s; 83s; 84s; -1s; 85s; 87s; 89s; -1s; -1s; 90s; -1s; 91s; 92s; 93s; 94s; 95s; 96s; -1s; -1s; -1s; 98s; 100s; 101s; 102s; -1s; -1s; -1s; -1s; 103s; 105s; 106s; 108s; 111s; 112s; 114s; -1s; 115s; 116s; 119s; 120s; 122s; 125s; 126s; 128s; 129s; 130s; 132s; 133s; 134s; 136s; 139s; 142s; 144s; 145s; 147s; 149s; 150s; -1s; 152s; 153s; 154s; 156s; -1s; 157s; 158s; 159s; 162s; -1s; -1s; 164s; 166s; 169s; -1s; 170s; 171s; 173s; 175s; -1s; 177s; 178s; 179s; 180s; 182s; 183s; -1s; 184s; 187s; 189s; 190s; 191s; 192s; -1s; 194s; 195s; 196s; 197s; 199s; -1s; 200s; 201s; 202s; 203s; 204s; 206s; 207s; 209s; 211s; -1s; -1s; 212s; 213s; 214s; 215s; 216s; 217s; 218s; 219s; 220s; 221s; 222s; 223s; 224s; 226s; -1s; -1s; 227s; -1s; -1s; 228s; -1s; -1s; 229s; 230s; 231s; 233s; 236s; 239s; 240s; 241s; -1s; -1s; -1s; 243s; 244s; 245s; 246s; 248s; 251s; 253s; -1s; 255s; 257s; 259s; -1s; 261s; 262s; -1s; 263s; -1s; 264s; 266s; 267s; 268s; 272s; 273s; 275s; -1s; 276s; 277s; -1s; 278s; 279s; -1s; 280s; -1s; -1s; 281s; 282s; -1s; -1s; 283s; 286s; -1s; -1s; -1s; -1s; 287s; 288s; -1s; 290s; -1s; 291s; -1s; -1s; -1s; -1s; 292s; -1s; -1s; -1s; -1s; -1s; 293s; 294s; 295s; 296s; 298s; -1s; -1s; -1s; -1s; 301s; 302s; 303s; 304s; -1s; -1s; 305s; 306s; 307s; 309s; -1s; -1s; -1s; 310s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; 312s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; 313s; 314s; 315s; 316s; -1s; 317s; -1s; 319s; -1s; 320s; 321s; 322s; 323s; 325s; 326s; 327s; 328s; 330s; 331s; -1s; -1s; 332s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; 333s; -1s; 334s; 335s; -1s; -1s; -1s; -1s; 336s; 338s; -1s; -1s; -1s; -1s; 339s; 340s; -1s; -1s; 341s; 342s; 343s; 345s; 346s; 347s; 348s; 349s; 350s; 354s; -1s; 356s; 357s; 358s; 361s; 362s; -1s; -1s; -1s; -1s; 363s; -1s; -1s; 365s; 367s; 368s; -1s; -1s; -1s; 369s; 370s; 373s; -1s; -1s; -1s; -1s; 374s; 375s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; 376s; -1s; -1s; -1s; 377s; -1s; -1s; -1s; -1s; -1s; 378s; -1s; -1s; -1s; -1s; -1s; 379s; 380s; 381s; -1s; -1s; -1s; 382s; 384s; -1s; -1s; 385s; 386s; 387s; 388s; -1s; 389s; -1s; -1s; 390s; -1s; 391s; 392s; 394s; 395s; 396s; 397s; 398s; -1s; 399s; 401s; 402s; 403s; 404s; 405s; 406s; 407s; -1s; 408s; -1s; -1s; -1s; 409s; 411s; -1s; -1s; -1s; 412s; 414s; 415s; 416s; 417s; 418s; 419s; 420s; 422s; 423s; -1s; 424s; 426s; -1s; -1s; -1s; -1s; -1s; -1s; 428s; 429s; 430s; 431s; 433s; 434s; 436s; 438s; 439s; 443s; 444s; -1s; 445s; -1s; -1s; 446s; 447s; 448s; -1s; -1s; 450s; 452s; -1s; -1s; -1s; -1s; 453s; 454s; -1s; -1s; -1s; 455s; 456s; -1s; -1s; -1s; -1s; 458s; -1s; -1s; -1s; -1s; 459s; -1s; 460s; 461s; 462s; 463s; 464s; 465s; 466s; 467s; 468s; 469s; 470s; 471s; 472s; 473s; 474s; 475s; 476s; 477s; -1s; 478s; 479s; 480s; 482s; 483s; 484s; 486s; 487s; 488s; 490s; -1s; 491s; 493s; 494s; 495s; 496s; 497s; 498s; 501s; -1s; -1s; 502s; 503s; 506s; 508s; -1s; -1s; -1s; 510s; 511s; 512s; 513s; 515s; 517s; 518s; 519s; -1s; -1s; 520s; -1s; -1s; 521s; 523s; 524s; 525s; -1s; 526s; 527s; -1s; -1s; 528s; 529s; -1s; -1s; -1s; -1s; 530s; -1s; 531s; 532s; 534s; 535s; 537s; -1s; -1s; -1s; 538s; 540s; 544s; 545s; 546s; -1s; -1s; 547s; 548s; 550s; 551s; 553s; 555s; 557s; -1s; 558s; 559s; 562s; 563s; -1s; -1s; -1s; 566s; 568s; 570s; -1s; -1s; 572s; 574s; 577s; -1s; -1s; 578s; 580s; 583s; 585s; 588s; 591s; 592s; -1s; 593s; -1s; 595s; 596s; 597s; 599s; 601s; 602s; 604s; 606s; 607s; 609s; 610s; 611s; 612s; 613s; 614s; 615s; 617s; 618s; 621s; 623s; 624s; 625s; 627s; 630s; 633s; 635s; 636s; -1s; 637s; -1s; -1s; 638s; -1s; 639s; 640s; 641s; 642s; 643s; 646s; 648s; 649s; 651s; 653s; -1s; -1s; 655s; 656s; 657s; 659s; 662s; 663s; 664s; 665s; 667s; -1s; 669s; 670s; 671s; 674s; -1s; -1s; -1s; 677s; 678s; -1s; 679s; 680s; 681s; 682s; -1s; 683s; -1s; 684s; 685s; 687s; 689s; 690s; 691s; 694s; 695s; 696s; 699s; 700s; 701s; -1s; -1s; -1s; 702s; -1s; -1s; -1s; -1s; -1s; 703s; 704s; 705s; 706s; 708s; 709s; -1s; 710s; -1s; -1s; 711s; -1s; 712s; 713s; 714s; -1s; 715s; 717s; -1s; -1s; 718s; 720s; -1s; -1s; 721s; 722s; 723s; 724s; 726s; 727s; 729s; 730s; 732s; 734s; 735s; 736s; 737s; 741s; -1s; 743s; 744s; 745s; 746s; -1s; -1s; -1s; 748s; 750s; -1s; -1s; -1s; 751s; 752s; 754s; 757s; 758s; 760s; 761s; 762s; 763s; -1s; -1s; 765s; -1s; 767s; -1s; 769s; 771s; 772s; 774s; 776s; -1s; 777s; 778s; 779s; 780s; 782s; 784s; -1s; 786s; -1s; 789s; 790s; -1s; 791s; 792s; 793s; 794s; 795s; 798s; 800s; -1s; 801s; 803s; -1s; 806s; 807s; 808s; -1s; 810s; -1s; 813s; 816s; -1s; 817s; 819s; 820s; -1s; 821s; 823s; 824s; 825s; 826s; 829s; 830s; -1s; -1s; 831s; 832s; 833s; -1s; 834s; -1s; 836s; -1s; 837s; 838s; 840s; 842s; 843s; -1s; -1s; -1s; -1s; 845s; -1s; -1s; 846s; 847s; -1s; -1s; -1s; 848s; 849s; 850s; 852s; 854s; 856s; 857s; 859s; -1s; 861s; 864s; 865s; 867s; 869s; 870s; 872s; 873s; 874s; 875s; 878s; 880s; 881s; 882s; 883s; -1s; 884s; 885s; 886s; 889s; 890s; 893s; 894s; 896s; 897s; 898s; 900s; 902s; -1s; 903s; 905s; 906s; 907s; 908s; 910s; 912s; 914s; 916s; 918s; 921s; 923s; 924s; 925s; 927s; 931s; 933s; 934s; 937s; 938s; 941s; 944s; 948s; 950s; 952s; 954s; 957s; 961s; -1s; -1s; 962s; 963s; 964s; 965s; -1s; 967s; 968s; 970s; 974s; 976s; 977s; 978s; 979s; 981s; -1s; -1s; 983s; 984s; 985s; 986s; -1s; -1s; 987s; 989s; 991s; 993s; 994s; 995s; 996s; 997s; 998s; 999s; 1000s; 1001s; -1s; 1003s; 1004s; 1005s; 1007s; 1010s; -1s; 1011s; 1012s; 1014s; -1s; 1016s; -1s; 1018s; 1019s; -1s; 1021s; 1023s; 1024s; 1026s; 1029s; 1030s; 1032s; 1033s; -1s; 1034s; 1035s; 1036s; 1038s; 1040s; -1s; -1s; -1s; 1041s; 1042s; 1043s; -1s; 1044s; 1045s; -1s; -1s; -1s; -1s; -1s; 1047s; 1049s; -1s; -1s; -1s; 1050s; -1s; 1052s; -1s; 1053s; 1054s; -1s; 1055s; -1s; -1s; 1056s; 1057s; 1059s; 1062s; 1064s; 1065s; -1s; 1066s; -1s; 1067s; 1068s; 1069s; 1070s; 1072s; 1073s; -1s; 1076s; 1077s; -1s; 1078s; -1s; 1079s; 1080s; -1s; -1s; 1081s; 1082s; 1084s; 1086s; 1088s; 1089s; 1090s; -1s; 1091s; -1s; -1s; 1092s; 1093s; 1094s; 1096s; 1098s; 1099s; 1100s; 1102s; -1s; -1s; -1s; 1103s; 1104s; -1s; -1s; 1105s; -1s; 1106s; 1108s; 1109s; -1s; 1110s; 1112s; 1113s; -1s; 1114s; 1115s; 1116s; 1117s; 1118s; 1119s; 1120s; 1122s; 1123s; -1s; -1s; 1124s; 1125s; 1128s; 1130s; 1131s; -1s; -1s; -1s; -1s; 1132s; 1133s; 1134s; 1136s; 1139s; 1140s; 1141s; 1142s; 1143s; 1145s; 1146s; -1s; 1147s; 1148s; -1s; 1149s; -1s; 1150s; 1151s; 1152s; -1s; -1s; 1153s; -1s; 1154s; -1s; -1s; 1155s; -1s; 1156s; 1157s; 1158s; 1159s; 1160s; -1s; -1s; -1s; -1s; 1161s; -1s; -1s; -1s; 1162s; -1s; -1s; -1s; -1s; 1164s; 1165s; 1167s; 1168s; 1169s; 1170s; 1171s; 1173s; 1175s; 1177s; 1178s; 1179s; 1181s; 1182s; 1183s; -1s; 1184s; 1185s; 1188s; 1190s; 1191s; 1192s; 1193s; 1194s; -1s; 1195s; 1196s; 1197s; 1200s; 1204s; 1205s; -1s; 1206s; 1207s; 1209s; -1s; -1s; 1210s; 1211s; -1s; 1212s; -1s; 1213s; -1s; -1s; -1s; -1s; 1214s; -1s; 1215s; -1s; -1s; 1216s; 1217s; 1218s; 1220s; 1221s; 1222s; 1223s; -1s; -1s; -1s; -1s; 1224s; -1s; -1s; 1225s; 1226s; -1s; 1227s; -1s; -1s; -1s; 1228s; 1230s; -1s; -1s; -1s; -1s; 1231s; 1233s; -1s; -1s; -1s; -1s; 1234s; -1s; -1s; -1s; 1235s; 1236s; 1237s; -1s; -1s; -1s; -1s; -1s; 1238s; 1239s; -1s; 1240s; -1s; 1241s; -1s; -1s; -1s; -1s; -1s; -1s; 1242s; -1s; -1s; -1s; -1s; 1243s; 1246s; 1247s; 1248s; 1249s; 1250s; -1s; -1s; -1s; -1s; 1251s; 1252s; 1254s; 1256s; 1258s; 1259s; 1260s; 1262s; -1s; -1s; -1s; 1263s; 1264s; -1s; -1s; 1265s; -1s; 1266s; 1267s; 1268s; 1269s; 1270s; 1272s; 1274s; 1276s; 1277s; 1278s; -1s; 1280s; 1282s; 1284s; 1286s; 1289s; 1291s; 1294s; 1295s; 1296s; 1297s; 1300s; 1302s; 1304s; 1305s; 1308s; 1311s; 1312s; 1315s; 1318s; 1320s; 1322s; 1325s; 1326s; 1328s; -1s; 1329s; 1330s; 1334s; 1335s; 1336s; -1s; -1s; 1338s; 1339s; 1341s; -1s; -1s; -1s; 1343s; 1344s; -1s; -1s; 1346s; 1347s; 1348s; -1s; 1350s; 1351s; 1352s; 1354s; 1356s; 1358s; -1s; 1359s; -1s; 1360s; 1362s; 1363s; -1s; 1364s; -1s; 1366s; 1367s; -1s; -1s; 1368s; 1370s; 1371s; 1372s; -1s; -1s; -1s; 1373s; 1374s; 1376s; 1377s; 1378s; 1379s; -1s; -1s; 1381s; 1382s; 1384s; 1386s; 1387s; 1389s; 1390s; -1s; -1s; 1391s; 1393s; 1395s; 1396s; 1399s; 1400s; 1401s; 1402s; 1403s; 1404s; -1s; 1406s; 1407s; 1409s; 1410s; -1s; 1411s; 1412s; 1415s; 1417s; 1419s; -1s; 1420s; -1s; 1421s; 1422s; -1s; 1423s; -1s; 1424s; 1425s; 1427s; 1429s; 1431s; 1433s; 1434s; 1435s; -1s; 1436s; 1437s; -1s; 1438s; 1440s; 1443s; -1s; -1s; 1444s; 1445s; 1447s; 1449s; 1451s; 1452s; 1453s; 1455s; 1457s; 1459s; 1462s; 1463s; 1465s; 1468s; 1470s; 1472s; 1473s; 1475s; 1478s; 1482s; 1485s; -1s; 1487s; 1488s; 1489s; 1490s; 1491s; 1493s; 1494s; 1497s; 1500s; 1501s; 1502s; 1503s; 1504s; 1506s; 1509s; 1511s; 1512s; 1515s; 1517s; 1518s; 1519s; 1520s; 1521s; 1523s; 1524s; 1526s; 1528s; 1529s; 1530s; 1531s; 1534s; 1536s; 1538s; 1539s; 1542s; 1543s; 1545s; 1548s; 1551s; 1553s; 1556s; 1557s; 1559s; -1s; 1562s; -1s; 1563s; 1564s; 1566s; 1568s; 1570s; -1s; 1571s; 1572s; 1574s; 1575s; -1s; -1s; -1s; 1576s; 1577s; -1s; -1s; -1s; 1578s; 1579s; 1581s; -1s; 1582s; 1583s; -1s; -1s; 1584s; -1s; -1s; -1s; 1585s; 1586s; -1s; 1588s; -1s; 1591s; 1593s; -1s; -1s; -1s; -1s; -1s; 1594s; 1595s; 1596s; 1597s; 1598s; 1599s; 1600s; -1s; 1601s; -1s; 1602s; 1605s; 1606s; 1607s; 1609s; 1611s; -1s; 1612s; 1613s; 1615s; 1617s; 1619s; -1s; -1s; -1s; -1s; 1620s; -1s; -1s; 1621s; 1622s; -1s; -1s; -1s; -1s; -1s; 1624s; 1626s; -1s; -1s; -1s; 1627s; -1s; 1628s; -1s; 1629s; 1630s; -1s; 1632s; -1s; -1s; -1s; 1633s; 1634s; 1636s; -1s; 1637s; -1s; 1638s; -1s; 1639s; 1640s; -1s; 1641s; -1s; 1642s; -1s; -1s; -1s; -1s; 1644s; -1s; 1645s; -1s; -1s; -1s; -1s; 1646s; -1s; -1s; -1s; -1s; 1647s; -1s; -1s; -1s; -1s; 1648s; -1s; 1649s; 1650s; 1651s; 1652s; 1654s; -1s; -1s; -1s; -1s; 1655s; -1s; -1s; 1656s; 1657s; -1s; -1s; -1s; 1658s; 1659s; 1660s; 1662s; 1665s; 1667s; 1669s; 1671s; -1s; 1672s; -1s; 1673s; 1674s; -1s; 1675s; 1676s; -1s; 1677s; 1678s; 1679s; 1680s; 1681s; 1682s; 1685s; 1687s; 1688s; 1689s; 1691s; 1692s; 1693s; -1s; 1696s; -1s; 1698s; 1699s; -1s; -1s; 1700s; 1701s; 1704s; -1s; 1706s; 1707s; 1708s; -1s; 1709s; 1710s; 1712s; 1713s; 1716s; 1717s; 1718s; -1s; 1719s; -1s; 1720s; -1s; 1721s; 1723s; -1s; -1s; 1725s; 1726s; 1727s; -1s; 1728s; 1729s; 1730s; 1731s; 1733s; 1734s; -1s; 1735s; -1s; 1736s; 1739s; 1740s; 1741s; 1743s; -1s; -1s; -1s; 1744s; 1745s; 1746s; -1s; -1s; 1748s; -1s; 1749s; -1s; -1s; 1750s; 1751s; 1752s; 1753s; 1754s; 1755s; 1756s; 1757s; 1758s; -1s; -1s; 1760s; -1s; 1761s; -1s; -1s; -1s; 1762s; 1763s; -1s; -1s; 1764s; 1765s; -1s; -1s; 1766s; 1767s; 1768s; 1769s; -1s; 1771s; -1s; -1s; -1s; -1s; -1s; -1s; 1772s; -1s; -1s; -1s; 1773s; 1774s; -1s; -1s; -1s; -1s; -1s; 1776s; 1777s; -1s; -1s; -1s; 1778s; 1779s; 1780s; 1781s; 1783s; 1784s; 1785s; -1s; -1s; -1s; -1s; 1786s; -1s; -1s; -1s; -1s; -1s; 1787s; -1s; -1s; -1s; 1788s; 1790s; -1s; -1s; -1s; 1792s; 1793s; 1795s; 1797s; 1798s; 1799s; 1800s; -1s; -1s; -1s; -1s; 1802s; 1803s; -1s; -1s; -1s; -1s; 1804s; -1s; -1s; -1s; 1805s; 1806s; 1807s; 1808s; 1809s; 1810s; 1811s |]
let actionTable_entries = [| -1s; 1s; 5793s; 84s; 5s; 2s; 9661s; 122s; -8s; 3s; 9662s; 123s; -9s; 4s; 9663s; 124s; 9s; 5s; 10s; 6s; -12s; 7s; 9666s; 125s; -13s; -4s; 9667s; 126s; 1944s; 110s; 16s; 8s; 9672s; 128s; 9677s; 129s; 9678s; 130s; 26s; 9s; 27s; 10s; 9683s; 131s; 33s; 11s; 38s; 12s; 5832s; 101s; 42s; 13s; 43s; 14s; 5837s; 75s; 23217s; 343s; 23218s; 330s; 5840s; 76s; 5841s; 77s; -50s; 15s; 5842s; 78s; -51s; 16s; 5843s; 79s; 51s; 17s; 52s; 18s; 53s; 19s; 54s; 20s; -56s; 21s; 5848s; 80s; 56s; 22s; 59s; 23s; 62s; 24s; 63s; 25s; 64s; 26s; -66s; 27s; 5858s; 81s; 5859s; 82s; 67s; 28s; 5863s; -135s; 5864s; 83s; 5865s; 84s; 21314s; 117s; 21315s; 118s; 21316s; 119s; -7801s; 180s; 21317s; 120s; 21318s; 121s; 15526s; 262s; 21325s; 122s; -2017s; 1s; 21326s; 123s; 21327s; 124s; 21330s; 125s; -2022s; 2s; 21331s; 126s; 2023s; 3s; -2025s; 4s; 15541s; 263s; 2025s; 5s; -2027s; 6s; 21336s; 128s; 2027s; 7s; 25200s; 301s; 11685s; -101s; -101s; 40s; 21341s; 129s; -2033s; 8s; 21342s; 130s; -21348s; 131s; 25209s; 302s; 25211s; 303s; 13626s; 253s; -2043s; 9s; 5904s; 101s; -2044s; 10s; 13629s; 254s; 25216s; 304s; 5909s; 75s; 2049s; 11s; 5912s; 76s; 5913s; 77s; 5914s; 78s; 5915s; 79s; -2055s; 12s; 25226s; 305s; -2059s; 13s; 5920s; 80s; 2059s; 14s; 25232s; 306s; 19440s; 1s; -2067s; 16s; 19445s; 2s; 2067s; 17s; -5931s; 81s; 19447s; 3s; -2070s; 19s; -5932s; 82s; 19448s; 4s; 19449s; 5s; -2072s; 21s; 19450s; 6s; 19451s; 7s; 5936s; 83s; -145s; 1s; -5938s; 84s; 11730s; 226s; 21386s; 117s; -19457s; 8s; 21387s; 118s; -2079s; 24s; -5941s; -135s; 21388s; 119s; 21389s; 120s; -150s; 2s; 21390s; 121s; 11736s; 1s; 151s; 3s; -153s; 4s; 2083s; 28s; 153s; 5s; 154s; 6s; -156s; 7s; 11741s; 2s; -19467s; 9s; -21398s; 122s; 23328s; 301s; -11744s; 3s; -19468s; 10s; 21398s; 123s; -11745s; 4s; 21399s; 124s; 11745s; 5s; -161s; 8s; 11746s; 6s; -11748s; 7s; 21402s; 125s; 21403s; 126s; -13681s; 255s; 19473s; 11s; 23337s; 302s; 11752s; 8s; -21409s; 128s; 23339s; 303s; 19478s; 12s; 170s; 9s; 171s; 10s; -19483s; 13s; -21414s; 129s; 23344s; 304s; -19484s; 14s; 21414s; 130s; -11763s; 9s; 15624s; 185s; -178s; 11s; -11764s; 10s; 15625s; 186s; 21419s; 131s; 19490s; 16s; -19492s; 17s; 23353s; -197s; -183s; 12s; 23354s; 305s; -11770s; 11s; 19493s; 19s; 19495s; 21s; 186s; 13s; 187s; 14s; -11775s; 12s; 23360s; 306s; 23361s; -175s; 23362s; -175s; -11779s; 13s; -15641s; 187s; 19502s; 24s; -11780s; 14s; 23365s; -197s; 194s; 16s; 195s; 17s; 23368s; -197s; -198s; 19s; 19507s; 28s; 199s; 21s; 11786s; 16s; 11787s; 17s; -17582s; 282s; 19512s; 1s; 11789s; 19s; 11791s; 21s; 206s; 24s; 19517s; 2s; 23380s; -197s; -7934s; 174s; 19519s; 3s; 19520s; 4s; -212s; 28s; 19521s; 5s; -11799s; 24s; 19522s; 6s; 19523s; 7s; 216s; 1s; 11803s; 28s; 19528s; 8s; 7943s; 175s; 23392s; -197s; 221s; 2s; 11808s; 229s; 223s; 3s; 224s; 4s; 225s; 5s; 226s; 6s; 227s; 7s; -2160s; 32767s; 19538s; 9s; 19539s; 10s; 232s; 8s; 19545s; 11s; 13755s; 118s; 13756s; 119s; -13758s; 120s; 19550s; 12s; -2173s; 113s; -13759s; 121s; 25344s; 185s; -243s; 9s; -4105s; 67s; 25345s; 186s; 243s; 10s; 19554s; 13s; -19556s; 14s; 23417s; 345s; 249s; 11s; 4112s; 4s; 4113s; 5s; -4115s; 6s; 19562s; 16s; -4116s; 7s; -13771s; 125s; 19563s; 17s; -255s; 12s; 13771s; 126s; -6049s; 154s; 19565s; 19s; -19568s; 21s; 25360s; 187s; -259s; 13s; 4120s; 8s; -260s; 14s; 13776s; 128s; 17640s; 101s; 23434s; 330s; 19574s; 24s; -267s; 16s; 17645s; 75s; 267s; 17s; 4130s; 9s; -270s; 19s; -4132s; 10s; -17649s; 76s; 19579s; 28s; 17649s; 77s; -272s; 21s; 17650s; 78s; 17651s; 79s; 19584s; 272s; 4137s; 11s; 17656s; 80s; 278s; 24s; 4142s; 12s; 283s; 28s; 4146s; 13s; -17667s; 81s; -19598s; -195s; 21528s; 301s; 17667s; 82s; 17672s; 83s; -11881s; 232s; 17673s; 84s; 21537s; 302s; 21539s; 303s; 21544s; 304s; 23481s; 327s; 13827s; 118s; 13828s; 119s; -13830s; 120s; 21553s; -197s; -2245s; -9s; -13831s; 121s; 21554s; 305s; 2249s; -9s; 21560s; 306s; 21561s; -175s; 21562s; -175s; 21565s; -197s; 13842s; 125s; -2258s; 114s; 13843s; 126s; 21568s; -197s; -4194s; 135s; 13848s; 128s; 21580s; -197s; 6141s; 156s; 2280s; -9s; 2281s; -9s; 21592s; -197s; -2285s; -9s; 10008s; 1s; 2286s; -9s; 2288s; -9s; 10013s; 2s; 19669s; 299s; -2292s; -9s; 10015s; 3s; 10016s; 4s; 10017s; 5s; 10018s; 6s; -2296s; -9s; 10019s; 7s; 2296s; -9s; 2297s; -9s; 10024s; 8s; 23549s; 347s; 10034s; 9s; 10035s; 10s; -8110s; 182s; 13902s; 121s; 10041s; 11s; 10046s; 12s; 15840s; 101s; 10050s; 13s; 10051s; 14s; -13915s; 125s; 15845s; 75s; 13915s; 126s; 6192s; 74s; 15848s; 76s; 15849s; 77s; 15850s; 78s; -4266s; 136s; -10059s; 16s; -11990s; 233s; 15851s; 79s; -6198s; 75s; 10059s; 17s; 10061s; 19s; 6200s; 76s; -6202s; 77s; -10064s; 21s; 15856s; 80s; 6202s; 78s; 6203s; 79s; -6209s; 80s; 10070s; 24s; -15867s; 81s; 19728s; 229s; 15867s; 82s; 10075s; 28s; 15872s; 83s; -6219s; 81s; -10081s; 209s; 15873s; 84s; 6219s; 82s; 6224s; 83s; 6225s; 84s; 23625s; 327s; 13974s; 121s; 12049s; 234s; 13986s; 125s; 13987s; 126s; 6264s; 74s; -12062s; -9s; 23647s; 348s; 6269s; 75s; 6272s; 76s; 6273s; 77s; 6274s; 78s; 6275s; 79s; 8208s; 1s; 6280s; 80s; 8213s; 2s; -12077s; -9s; 19800s; 301s; 8215s; 3s; 8216s; 4s; 8217s; 5s; 8218s; 6s; 8219s; 7s; -6291s; 81s; 10152s; 211s; 6291s; 82s; 19809s; 302s; 8224s; 8s; 19811s; 303s; 12088s; -9s; 6296s; 83s; 6297s; 84s; 19816s; 304s; -8235s; 9s; 12096s; -83s; 8235s; 10s; -12102s; -83s; 19825s; -175s; 19826s; 305s; 8241s; 11s; 12104s; -83s; 12105s; -83s; 12106s; -83s; 12107s; -83s; -8247s; 12s; 19832s; 306s; 10178s; 212s; 19834s; -175s; -8251s; 13s; 12112s; -83s; -8252s; 14s; 19837s; -175s; 8258s; 16s; 8259s; 17s; 12122s; -83s; -8262s; 19s; 12123s; -83s; 15986s; 117s; -8264s; 21s; 15987s; 118s; -2472s; 116s; 15988s; 119s; 15989s; 120s; -12129s; -83s; -14060s; 126s; -15991s; 121s; 19852s; -175s; 12129s; -83s; 12130s; 89s; 8270s; 24s; 15997s; 122s; 15998s; 123s; -8276s; 28s; 15999s; 124s; -16003s; 125s; 19864s; -175s; 16003s; 126s; 16008s; 128s; 4423s; 137s; 16013s; 129s; -16015s; 130s; 25669s; 360s; 16019s; 131s; 576s; 1s; 578s; 43s; 579s; 44s; 580s; 45s; 581s; 46s; 582s; 47s; 583s; 48s; 584s; 4s; 585s; 5s; 586s; 6s; 587s; 7s; 23760s; 301s; 589s; 49s; 590s; 50s; 591s; 51s; 592s; 8s; 593s; -4s; 594s; 52s; 595s; 53s; 23769s; 302s; 14115s; 118s; -14117s; 119s; 23771s; 303s; 14117s; 120s; 14118s; 121s; -603s; 9s; 12188s; 237s; 603s; 10s; 23776s; 304s; -606s; 54s; 8329s; 15s; 606s; 55s; -8333s; 18s; 16056s; 87s; 609s; 11s; 8334s; 20s; 611s; 56s; 8336s; 22s; 14130s; 125s; -615s; 57s; -14132s; 126s; 23786s; 305s; 8339s; 23s; 618s; 13s; -620s; 14s; -8344s; 25s; 14136s; 128s; -8345s; 26s; 23792s; 306s; -8346s; 27s; 18000s; 110s; 625s; 15s; 626s; 16s; 627s; 17s; -629s; 18s; 8352s; 185s; -630s; 19s; 8353s; 186s; 630s; 20s; 631s; 21s; 632s; 22s; 635s; 23s; -639s; 24s; 4500s; 138s; 639s; 25s; 640s; 26s; 641s; 27s; 643s; 28s; 8368s; 187s; 21888s; 301s; 648s; 1s; 653s; 2s; 655s; 3s; -657s; 4s; 21897s; 302s; 657s; 5s; -659s; 6s; 21899s; 303s; 659s; 7s; -2595s; 117s; 21904s; 304s; -665s; 8s; -2596s; 118s; -21906s; -175s; 23836s; 332s; 2596s; 119s; 2597s; 120s; 2598s; 121s; 14187s; 118s; -12258s; 238s; 14188s; 119s; 14189s; 120s; -14191s; 121s; 21914s; 305s; -675s; 9s; 2605s; 122s; -676s; 10s; 2606s; 123s; 2607s; 124s; 23850s; 333s; -680s; -80s; -2611s; 125s; 21920s; 306s; 2611s; 126s; -682s; 11s; -2613s; 127s; 21922s; -175s; -2617s; 128s; 14202s; 125s; -687s; 12s; 14203s; 126s; -4550s; 139s; 6480s; 101s; -691s; 13s; 2621s; 129s; -692s; 14s; -2623s; 130s; 14208s; 128s; 6485s; 75s; -6489s; 76s; 18074s; 117s; -2628s; 131s; -6490s; 77s; 18075s; 118s; -6491s; 78s; 18076s; 119s; -699s; 16s; -6492s; 79s; 18077s; 120s; -700s; 17s; -18079s; 121s; 23871s; 334s; 8424s; 1s; 701s; 19s; -704s; 21s; 6496s; 80s; 8429s; 2s; 18085s; 122s; -8432s; 3s; 18086s; 123s; -8433s; 4s; 18087s; 124s; 8433s; 5s; -711s; 24s; 8434s; 6s; -8436s; 7s; 18090s; 125s; 18091s; 126s; -6507s; 81s; 10368s; -83s; 6507s; 82s; 715s; 28s; 8440s; 8s; 18096s; 128s; 10373s; -83s; 6512s; 83s; -721s; 1s; 6513s; 84s; 10376s; -83s; -10378s; -83s; -18102s; 129s; 21963s; 326s; -10379s; -83s; 18102s; 130s; 10379s; -83s; 725s; 2s; -8451s; 9s; 12312s; -166s; -728s; 3s; -8452s; 10s; 12313s; 96s; -729s; 4s; -18108s; 131s; 21969s; 327s; -730s; 5s; 10384s; -83s; 730s; 6s; 731s; 7s; 8457s; 11s; 736s; 8s; 8462s; 12s; 10394s; -83s; 10395s; -83s; 14258s; 117s; -8467s; 13s; -12329s; 97s; 14259s; 118s; -8468s; 14s; 14260s; 119s; 14261s; 120s; -10401s; -83s; 14262s; 121s; -747s; 9s; 10401s; -83s; -748s; 10s; 10402s; 89s; 8474s; 16s; 8475s; 17s; -14270s; 122s; 16200s; 101s; -754s; 11s; -8478s; 19s; 14270s; 123s; 14271s; 124s; 8479s; 21s; 756s; -80s; -14275s; 125s; 16205s; 75s; -759s; 12s; 14275s; 126s; 16208s; 76s; 16209s; 77s; -763s; 13s; -8487s; 24s; 16210s; 78s; -764s; 14s; -14281s; 128s; 16211s; 79s; 8491s; 28s; 16216s; 80s; 770s; 16s; 771s; 17s; 8496s; 1s; 773s; 19s; 775s; 21s; 8501s; 2s; -16227s; 81s; 20088s; -163s; -8504s; 3s; 16227s; 82s; 8504s; 4s; 8505s; 5s; -783s; 24s; -8507s; 6s; 18161s; 285s; 8507s; 7s; 16232s; 83s; -10441s; 185s; -16234s; 84s; 18164s; 286s; 10441s; 186s; 787s; 28s; 8512s; 8s; 792s; 63s; 8522s; 9s; 8523s; 10s; 800s; 4s; -802s; 5s; 10456s; 187s; 802s; 6s; 803s; 7s; 8529s; 11s; 808s; 8s; 8534s; 12s; 12397s; 240s; 12398s; 241s; -4677s; 140s; 8538s; 13s; 8539s; 14s; -819s; 9s; 4680s; 67s; 819s; 10s; 8546s; 16s; 8547s; 17s; 16272s; 1s; -826s; 11s; 8549s; 19s; 4688s; 4s; -4690s; 5s; 8551s; 21s; 4690s; 6s; -4692s; 7s; 16277s; 2s; -831s; 12s; 14347s; 126s; 16279s; 3s; 16280s; 4s; 16281s; 5s; -835s; 13s; -4697s; 8s; -8559s; 24s; 16282s; 6s; -16284s; 7s; 20145s; 310s; 18216s; 185s; 18217s; 186s; 8563s; 28s; -4703s; 141s; 16288s; 8s; -4707s; 9s; 8568s; 1s; 4707s; 10s; 8573s; 2s; -16299s; 9s; 20160s; 71s; -4714s; 11s; -8576s; 3s; 16299s; 10s; 8576s; 4s; -8578s; 5s; 18232s; 187s; 8578s; 6s; 8579s; 7s; 4718s; 12s; -10513s; 1s; 16305s; 11s; -4723s; 13s; 8584s; 8s; -10518s; 2s; 16310s; 12s; -865s; 67s; 10519s; 3s; 10520s; 4s; -10522s; 5s; 16314s; 13s; -10523s; 6s; 16315s; 14s; 10523s; 7s; 8594s; 9s; 8595s; 10s; 872s; 4s; -874s; 5s; 10528s; 8s; -875s; 6s; 16322s; 16s; -876s; 7s; 16323s; 17s; -2809s; 67s; -8602s; 11s; 16325s; 19s; 16327s; 21s; 880s; 8s; 8606s; 12s; 10538s; 9s; 10539s; 10s; 2816s; 4s; -2818s; 5s; -8611s; 13s; 16334s; 24s; -2819s; 6s; 8611s; 14s; 2819s; 7s; -891s; 9s; 10545s; 11s; -892s; 10s; -6685s; 163s; 16339s; 28s; 2824s; 8s; 8618s; 16s; -8620s; 17s; 10550s; 12s; -898s; 11s; -8622s; 19s; 22138s; 330s; -2831s; 132s; -8624s; 21s; 10554s; 13s; 10555s; 14s; -903s; 12s; 14419s; 126s; 2834s; 9s; 2835s; 10s; -907s; 13s; 8630s; 24s; 10562s; 16s; 10563s; 17s; 18288s; 185s; -2842s; 11s; -10566s; 19s; 18289s; 186s; 8635s; 28s; 10567s; 21s; 2846s; 12s; 8640s; 1s; 16365s; 270s; -2851s; 13s; 10574s; 24s; 8645s; 2s; 8647s; 3s; -8649s; 4s; 10579s; 28s; -8650s; 5s; 18304s; 187s; 8650s; 6s; -4790s; 142s; 8651s; 7s; 8656s; 8s; 22176s; 301s; 936s; 1s; 6733s; -169s; 941s; 2s; -8667s; 9s; 12528s; 1s; -944s; 3s; 8667s; 10s; -945s; 4s; 22185s; 302s; 945s; 5s; -947s; 6s; 22187s; 303s; -948s; 7s; 12533s; 2s; -2881s; 1s; -8674s; 11s; 12535s; 3s; 12536s; 4s; -12538s; 5s; 22192s; 304s; -953s; 8s; 12538s; 6s; 12539s; 7s; -2886s; 2s; 8678s; 12s; 6748s; 164s; 2887s; 3s; 2888s; 4s; -2890s; 5s; -8683s; 13s; 12544s; 8s; -2891s; 6s; 8683s; 14s; 2891s; 7s; 22202s; 305s; 962s; 9s; 963s; 10s; 2896s; 8s; 8690s; 16s; -6761s; 165s; -8692s; 17s; 22208s; 306s; 12554s; 9s; -970s; 11s; -8694s; 19s; 12555s; 10s; 16418s; 117s; -8696s; 21s; 16419s; 118s; 16420s; 119s; 16421s; 120s; -975s; 12s; 16422s; 121s; -2907s; 9s; 12561s; 11s; 2907s; 10s; -979s; 13s; 8702s; 24s; 979s; 14s; 12566s; 12s; 16429s; 122s; -2914s; 11s; 16430s; 123s; -8708s; 28s; 16431s; 124s; -985s; -4s; 12570s; 13s; -986s; 15s; 12571s; 14s; -987s; 16s; 16434s; 125s; -988s; 17s; -2919s; 12s; 16435s; 126s; -989s; 18s; 8712s; 1s; 989s; 19s; 990s; 20s; -992s; 21s; 2922s; 13s; -993s; 22s; -2924s; 14s; -12579s; 16s; 16440s; 128s; -8718s; 2s; 12579s; 17s; 20304s; 1s; -996s; 23s; -8720s; 3s; 12581s; 19s; 8720s; 4s; -8722s; 5s; -12584s; 21s; 16445s; 129s; -999s; 24s; -8723s; 6s; 16446s; 130s; -1000s; 25s; -2931s; 16s; -8724s; 7s; 20309s; 2s; -1001s; 26s; 2931s; 17s; -1002s; 27s; 20311s; 3s; -2934s; 19s; 20312s; 4s; -1004s; 28s; -16452s; 131s; 20313s; 5s; -2936s; 21s; -8729s; 8s; -12591s; 24s; 20314s; 6s; 20315s; 7s; 1008s; 1s; 12595s; 28s; 20320s; 8s; -2943s; 24s; 22252s; 332s; 1013s; 2s; -8739s; 9s; 12600s; 185s; -1016s; 3s; -8740s; 10s; -12602s; 186s; 16463s; 271s; -1017s; 4s; 2947s; 28s; 1017s; 5s; 1018s; 6s; 1019s; 7s; -20331s; 9s; 24192s; -163s; -8746s; 11s; 20331s; 10s; 1024s; 8s; 22266s; 333s; 8750s; 12s; 20337s; 11s; -8755s; 13s; 12616s; 187s; -8756s; 14s; 14548s; 119s; -14550s; 120s; 20342s; 12s; 14550s; 121s; 1034s; 9s; 1035s; 10s; 20346s; 13s; 20347s; 14s; 8762s; 16s; 8763s; 17s; 16488s; 272s; -1042s; 11s; 8765s; 19s; 8767s; 21s; 20354s; 16s; -14563s; 125s; 20355s; 17s; -1047s; 12s; -14564s; 126s; 22287s; 334s; 20357s; 19s; 20359s; 21s; -1051s; 13s; 8774s; 24s; -1052s; 14s; 14568s; 128s; -16502s; -195s; 18432s; 1s; 8779s; 28s; -4919s; 141s; 20366s; 24s; -1059s; 16s; 18437s; 2s; 1059s; 17s; -8785s; 1s; 18439s; 3s; -1062s; 19s; -18441s; 4s; 20371s; 28s; 18441s; 5s; -1064s; 21s; 18442s; 6s; 18443s; 7s; 8789s; 2s; 8791s; 3s; 8792s; 4s; -8794s; 5s; 18448s; 8s; -1071s; 24s; 8794s; 6s; 8795s; 7s; 1075s; 28s; 8800s; 8s; 24249s; 310s; 18458s; 9s; -1081s; 71s; 18459s; 10s; -8811s; 9s; 18465s; 11s; 8811s; 10s; -6885s; 168s; 18470s; 12s; 8817s; 11s; 18474s; 13s; 18475s; 14s; 8822s; 12s; 14618s; 117s; -8827s; 13s; 14619s; 118s; -8828s; 14s; -14621s; 119s; 18482s; 16s; -14622s; 120s; 18483s; 17s; 14622s; 121s; 18485s; 19s; 18487s; 21s; 8834s; 16s; 8835s; 17s; 14629s; 122s; -8838s; 19s; 14630s; 123s; 14631s; 124s; -8840s; 21s; -18495s; 24s; 24287s; 352s; 14634s; 125s; 14635s; 126s; 18499s; 28s; 8846s; 24s; 14640s; 128s; 12712s; 245s; -8852s; 28s; 18506s; 117s; -14646s; 129s; 18507s; 118s; -14647s; 130s; 18508s; 119s; 18509s; 120s; 18510s; 121s; 8856s; 1s; 14651s; 131s; 8861s; 2s; 18517s; 122s; -8864s; 3s; 18518s; 123s; -8865s; 4s; 18519s; 124s; 8865s; 5s; 8866s; 6s; -8868s; 7s; 18522s; 125s; 18523s; 126s; 8872s; 8s; 18528s; 128s; 1152s; 73s; -5017s; 143s; 18533s; 129s; 18534s; 130s; 18535s; 290s; -8883s; 9s; 12744s; 101s; 8883s; 10s; 18539s; 131s; 10817s; 216s; 12749s; 75s; 24336s; 71s; 8889s; 11s; 12752s; 76s; 12753s; 77s; -10824s; 217s; 12754s; 78s; 12755s; 79s; 8894s; 12s; 14690s; 117s; -8899s; 13s; -12761s; 80s; 14691s; 118s; -8900s; 14s; 14692s; 119s; 14693s; 120s; 14694s; 121s; 8906s; 16s; 8907s; 17s; -12771s; 81s; 14701s; 122s; -8910s; 19s; -12772s; 82s; 14702s; 123s; 14703s; 124s; 8911s; 21s; 22429s; 335s; 14706s; 125s; -12777s; 83s; 14707s; 126s; 12777s; 84s; 6985s; 169s; 8918s; 24s; 14712s; 128s; 18576s; 209s; 8923s; 28s; 14717s; 129s; 14718s; 130s; 8928s; 1s; 14723s; 131s; 8933s; 2s; 8935s; 3s; 8936s; 4s; 8937s; 5s; 8938s; 6s; 8939s; 7s; 8944s; 8s; -1225s; 74s; 16672s; 274s; 1229s; 75s; -8955s; 9s; 12816s; 101s; 8955s; 10s; 1232s; 76s; 1233s; 77s; 1234s; 78s; -1236s; 79s; 12821s; 75s; -5099s; 144s; 24408s; 185s; -8962s; 11s; 24409s; 186s; 12824s; 76s; 12825s; 77s; -1241s; 80s; 12826s; 78s; 12827s; 79s; 8966s; 12s; 22484s; 336s; 14762s; 117s; -8971s; 13s; -12833s; 80s; 14763s; 118s; -8972s; 14s; 14764s; 119s; 14765s; 120s; 14766s; 121s; 1250s; 81s; 1251s; 82s; 24424s; 187s; 8978s; 16s; 8979s; 17s; -1257s; 83s; -12843s; 81s; 14773s; 122s; -1258s; 84s; -8982s; 19s; -12844s; 82s; 14774s; 123s; 14775s; 124s; 8983s; 21s; 14778s; 125s; -12849s; 83s; 14779s; 126s; 12849s; 84s; 8990s; 24s; 14784s; 128s; 16717s; 275s; 8995s; 28s; 9000s; 1s; 14795s; 131s; 9005s; 2s; 20592s; 185s; -9008s; 3s; 20593s; 186s; 9008s; 4s; 9009s; 5s; 9010s; 6s; 9011s; 7s; 9016s; 8s; 22536s; 337s; 1296s; 87s; 20608s; 187s; -9027s; 9s; 12888s; 248s; 9027s; 10s; -5171s; 145s; 24480s; 355s; 9033s; 11s; 9038s; 12s; 9042s; 13s; 9043s; 14s; 10975s; 218s; 9050s; 16s; 9051s; 17s; 9053s; 19s; 9055s; 21s; 9062s; 24s; -9068s; 28s; -14861s; 256s; 18722s; 117s; 18723s; 118s; 18724s; 119s; 18725s; 120s; 18726s; 121s; 9072s; 1s; 9077s; 2s; -18734s; 122s; 20664s; 255s; -9080s; 3s; 18734s; 123s; -9081s; 4s; 18735s; 124s; 9081s; 5s; 9082s; 6s; -9084s; 7s; 18738s; 125s; 18739s; 126s; 9088s; 8s; 18744s; 128s; 1368s; -83s; 18749s; 129s; 18750s; 130s; 18751s; 292s; 1373s; -83s; -9099s; 9s; 12960s; 101s; -7169s; 171s; 9099s; 10s; -1377s; -83s; 18755s; 131s; 1377s; -83s; 1378s; -83s; -1380s; -83s; 12965s; 75s; -3313s; 1s; 9105s; 11s; -12969s; 76s; 24554s; 117s; -12970s; 77s; 24555s; 118s; -1385s; -83s; -12971s; 78s; 24556s; 119s; -12972s; 79s; 24557s; 120s; -3318s; 2s; -9111s; 12s; 24558s; 121s; 14904s; 1s; 3319s; 3s; 3320s; 4s; -3322s; 5s; -9115s; 13s; 12976s; 80s; -3323s; 6s; 9115s; 14s; -3324s; 7s; 14909s; 2s; 24565s; 122s; -1395s; -83s; -14912s; 3s; 24566s; 123s; -1396s; -83s; -14913s; 4s; 24567s; 124s; 14913s; 5s; -3329s; 8s; -11053s; 219s; 14914s; 6s; -9123s; 16s; -14916s; 7s; 24570s; 125s; -9124s; 17s; 24571s; 126s; -1401s; -83s; 12986s; 81s; -1402s; -83s; -9126s; 19s; 12987s; 82s; 1402s; 89s; -9128s; 21s; 14920s; 8s; 24576s; 128s; 12992s; 83s; -3339s; 9s; -5270s; 146s; -7201s; 172s; 12993s; 84s; 3339s; 10s; 24581s; 129s; -9135s; 24s; 24582s; 130s; 14930s; 9s; -3346s; 11s; 14931s; 10s; -9140s; 28s; 24587s; 131s; 3350s; 12s; -9145s; 1s; 14937s; 11s; 3354s; 13s; 3355s; 14s; -9150s; 2s; 14942s; 12s; 9151s; 3s; 9152s; 4s; -9154s; 5s; 14946s; 13s; -9155s; 6s; 14947s; 14s; -3363s; 16s; 9155s; 7s; 3363s; 17s; 3365s; 19s; -3368s; 21s; 9160s; 8s; 14954s; 16s; 14955s; 17s; -1441s; 91s; 14957s; 19s; 14959s; 21s; 3374s; 24s; -9171s; 9s; 11101s; 220s; 9171s; 10s; 3379s; 28s; 14966s; 24s; 9177s; 11s; -14972s; 28s; 24626s; 117s; 24627s; 118s; 24628s; 119s; 24629s; 120s; -9183s; 12s; 24630s; 121s; 14978s; 117s; -9187s; 13s; 14979s; 118s; -9188s; 14s; 14980s; 119s; 14981s; 120s; -14983s; 121s; 24637s; 122s; 24638s; 123s; 24639s; 124s; -9195s; 16s; 24642s; 125s; -9196s; 17s; 24643s; 126s; 14989s; 122s; -9198s; 19s; -14991s; 123s; 22714s; 338s; 14991s; 124s; 9199s; 21s; 24648s; 128s; 14994s; 125s; 14995s; 126s; -7273s; 74s; 14996s; 258s; 24653s; 129s; -9207s; 24s; 24654s; 130s; 15000s; 128s; 7277s; 75s; 13072s; 250s; -7281s; 76s; -9212s; 28s; 24659s; 131s; -7282s; 77s; 15005s; 129s; -7283s; 78s; 15006s; 130s; 7283s; 79s; 9216s; 1s; 15011s; 131s; 7288s; 80s; 9221s; 2s; 9223s; 3s; -9225s; 4s; 20810s; 117s; -9226s; 5s; 20811s; 118s; -9227s; 6s; 20812s; 119s; -9228s; 7s; 20813s; 120s; 20814s; 121s; 7298s; 81s; 7299s; 82s; 9232s; 8s; 16957s; -169s; -7305s; 83s; 20821s; 122s; -1513s; 1s; -7306s; 84s; 20822s; 123s; 20823s; 124s; 20826s; 125s; -1518s; 2s; 20827s; 126s; -9243s; 9s; 13104s; 1s; -1520s; 3s; 9243s; 10s; 1520s; 4s; 1521s; 5s; -1523s; 6s; 20832s; 128s; -1524s; 7s; 13109s; 2s; -16973s; 164s; 24696s; 1s; -3457s; 1s; -9250s; 11s; 13111s; 3s; 13112s; 4s; -13114s; 5s; 20837s; 129s; -1529s; 8s; -13115s; 6s; 20838s; 130s; -13116s; 7s; 24701s; 2s; -3462s; 2s; 9254s; 12s; 24703s; 3s; -3464s; 3s; 24704s; 4s; -3465s; 4s; -20844s; 131s; 24705s; 5s; -3466s; 5s; -9259s; 13s; -13121s; 8s; 24706s; 6s; -3467s; 6s; -9260s; 14s; 24707s; 7s; -3468s; 7s; 16984s; 165s; 1538s; 9s; 1539s; 10s; 24712s; 8s; 3472s; 8s; -9267s; 16s; 11197s; 221s; 9267s; 17s; -13131s; 9s; -15062s; 139s; 16992s; 101s; -1546s; 11s; -9270s; 19s; 13131s; 10s; 5408s; 147s; 9271s; 21s; 5410s; 148s; 16997s; 75s; -1551s; 12s; 24722s; 9s; -3483s; 9s; -13138s; 11s; 24723s; 10s; -3484s; 10s; 17000s; 76s; 17001s; 77s; -1555s; 13s; -9279s; 24s; 17002s; 78s; -1556s; 14s; 17003s; 79s; 13142s; 12s; 24729s; 11s; 3489s; 11s; 9283s; 28s; -13147s; 13s; 17008s; 80s; 13147s; 14s; -1563s; 16s; 24734s; 12s; -1564s; 17s; 3494s; 12s; 9288s; 1s; 1565s; 19s; 24738s; 13s; -1568s; 21s; -3499s; 13s; 24739s; 14s; -3500s; 14s; 13154s; 16s; -9294s; 2s; 13155s; 17s; 17018s; 81s; -9296s; 3s; -13158s; 19s; 17019s; 82s; 9296s; 4s; -9298s; 5s; 13159s; 21s; -1575s; 24s; -9299s; 6s; 24746s; 16s; -3507s; 16s; -9300s; 7s; 24747s; 17s; -3508s; 17s; 17024s; 83s; -11233s; 1s; -17026s; 84s; 24749s; 19s; 3509s; 19s; -1580s; 28s; 24751s; 21s; -3512s; 21s; -9305s; 8s; 13166s; 24s; 11237s; 2s; 11239s; 3s; -11241s; 4s; 13171s; 28s; -11242s; 5s; 24758s; 24s; -3519s; 24s; 11242s; 6s; 11243s; 7s; 9314s; 9s; -9316s; 10s; 24763s; 28s; 3523s; 28s; 11248s; 8s; 9321s; 11s; 20908s; 319s; 9326s; 12s; -11259s; 9s; 22844s; 339s; 11259s; 10s; 9330s; 13s; 9331s; 14s; 11265s; 11s; 9338s; 16s; -9340s; 17s; 11270s; 12s; -1618s; 93s; -9342s; 19s; 17065s; 169s; -9344s; 21s; 11274s; 13s; 11275s; 14s; 9350s; 24s; 11282s; 16s; 11283s; 17s; 19008s; 1s; 11285s; 19s; 9355s; 28s; 11287s; 21s; 19013s; 2s; -7430s; 174s; -9361s; 1s; 19015s; 3s; 19016s; 4s; 19017s; 5s; -11295s; 24s; 19018s; 6s; -15158s; 259s; 19019s; 7s; 9365s; 2s; 9367s; 3s; -9369s; 4s; 11299s; 28s; -9370s; 5s; 19024s; 8s; -7440s; 175s; 9370s; 6s; 9371s; 7s; 9376s; 8s; 19034s; 9s; -1657s; 94s; 19035s; 10s; -9387s; 9s; 19041s; 11s; 9387s; 10s; 19046s; 12s; 9393s; 11s; 19050s; 13s; -19052s; 14s; 22913s; 340s; 9398s; 12s; 9402s; 13s; -9404s; 14s; 19058s; 16s; 19059s; 17s; 19061s; 19s; 19063s; 21s; 9410s; 16s; 9411s; 17s; 9413s; 19s; -9416s; 21s; 19070s; 24s; 19075s; 28s; 9422s; 24s; 9427s; 28s; 9432s; 1s; 9437s; 2s; 9439s; 3s; 9440s; 4s; 9441s; 5s; -9443s; 6s; 19097s; 294s; 9443s; 7s; 9448s; 8s; 22968s; 1s; 1728s; 1s; 22973s; 2s; 1733s; 2s; -9459s; 9s; 22975s; 3s; -1736s; 3s; -9460s; 10s; 22976s; 4s; -1737s; 4s; 22977s; 5s; -1738s; 5s; 22978s; 6s; -1739s; 6s; 22979s; 7s; 1739s; 7s; 9465s; 11s; 22984s; 8s; 1744s; 8s; 9470s; 12s; 15264s; 1s; 24921s; 327s; 9474s; 13s; 9475s; 14s; 15269s; 2s; 22994s; 9s; -1755s; 9s; -15272s; 3s; 22995s; 10s; -1756s; 10s; 15272s; 4s; 15273s; 5s; 15274s; 6s; -9483s; 16s; 15275s; 7s; 9483s; 17s; 23001s; 11s; -1762s; 11s; -9486s; 19s; 11416s; 223s; -9488s; 21s; 15280s; 8s; 23006s; 12s; 1766s; 12s; 23010s; 13s; -1771s; 13s; -9495s; 24s; 23011s; 14s; -1772s; 14s; 24943s; 357s; 15290s; 9s; 15291s; 10s; 9499s; 28s; 23018s; 16s; -1779s; 16s; 23019s; 17s; 1779s; 17s; -9505s; 206s; -15298s; 11s; 23021s; 19s; 1781s; 19s; 23023s; 21s; 1783s; 21s; 15302s; 12s; 7580s; 177s; -15307s; 13s; 23030s; 24s; -1791s; 24s; 15307s; 14s; 19172s; 295s; 23035s; 28s; 1795s; 28s; 15314s; 16s; 15315s; 17s; 23040s; 1s; -1801s; -166s; 15317s; 19s; 1801s; 96s; 15319s; 21s; 23045s; 2s; -9531s; 207s; -11462s; 174s; 23047s; 3s; 23048s; 4s; 23049s; 5s; -15327s; 24s; 23050s; 6s; 23051s; 7s; 15331s; 28s; 23056s; 8s; -1817s; 97s; 11471s; 175s; 15336s; 101s; 24993s; 358s; 15341s; 75s; 23066s; 9s; 23067s; 10s; 15344s; 76s; 15345s; 77s; 15346s; 78s; 15347s; 79s; 21141s; 320s; -17281s; -83s; 23073s; 11s; 15352s; 80s; 23078s; 12s; 23082s; 13s; 23083s; 14s; 15362s; 81s; 15363s; 82s; 23090s; 16s; 23091s; 17s; 15368s; 83s; -15370s; 84s; 23093s; 19s; 23095s; 21s; 23102s; 24s; 17313s; 279s; -17315s; 89s; 23107s; 28s; 1872s; 101s; 7666s; 178s; 1877s; 75s; 13464s; 185s; 13465s; 186s; -1881s; 76s; 7673s; 179s; 1881s; 77s; 1882s; 78s; 1883s; 79s; 1888s; 80s; 13480s; 187s; -1899s; 81s; 5760s; 101s; -1900s; 82s; 11554s; 225s; 5765s; 75s; -1905s; 83s; 17352s; 185s; -1906s; 84s; 17353s; 186s; 5768s; 76s; 5769s; 77s; 5770s; 78s; -5772s; 79s; 15426s; 253s; 5776s; 80s; 5777s; 149s; 17368s; 187s; 5786s; 81s; 5787s; 82s; 9650s; 117s; 9651s; 118s; 9652s; 119s; 9653s; 120s; -5793s; 83s; -9655s; 121s; 21240s; 154s |]
let actionTable_defaultActions = [| -32768s; -64s; -32768s; -32768s; -66s; -67s; -68s; -65s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -1s; -32768s; -32768s; -7s; -8s; -29s; -30s; -32s; -60s; -61s; -63s; -32768s; -44s; -45s; -85s; -86s; -87s; -90s; -88s; -91s; -93s; -96s; -94s; -92s; -89s; -97s; -99s; -95s; -98s; -32768s; -32768s; -79s; -32768s; -32768s; -64s; -32768s; -63s; -32768s; -64s; -69s; -32768s; -32768s; -158s; -17s; -32768s; -120s; -32768s; -123s; -124s; -125s; -122s; -32768s; -32768s; -32768s; -121s; -32768s; -32768s; -82s; -32768s; -12s; -84s; -32768s; -15s; -32768s; -32768s; -16s; -32768s; -165s; -32768s; -14s; -150s; -32768s; -120s; -11s; -32768s; -109s; -111s; -112s; -114s; -116s; -118s; -32768s; -13s; -32768s; -2s; -10s; -3s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -62s; -34s; -73s; -74s; -76s; -75s; -32768s; -32768s; -32768s; -77s; -72s; -32768s; -32768s; -32768s; -126s; -127s; -128s; -32768s; -134s; -32768s; -32768s; -32768s; -32768s; -32768s; -81s; -22s; -32768s; -104s; -43s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -168s; -32768s; -32768s; -32768s; -119s; -32768s; -32768s; -20s; -32768s; -32768s; -32768s; -32768s; -24s; -32768s; -6s; -5s; -143s; -142s; -32768s; -28s; -139s; -141s; -51s; -50s; -48s; -49s; -47s; -52s; -53s; -55s; -54s; -46s; -31s; -57s; -58s; -59s; -56s; -70s; -32768s; -106s; -32768s; -32768s; -70s; -32768s; -32768s; -157s; -32768s; -129s; -32768s; -131s; -132s; -32768s; -133s; -33s; -32768s; -25s; -32768s; -32768s; -32768s; -38s; -32768s; -172s; -192s; -32768s; -18s; -10s; -32768s; -32768s; -32768s; -164s; -149s; -32768s; -32768s; -151s; -27s; -32768s; -32768s; -110s; -115s; -113s; -117s; -32768s; -39s; -32768s; -32768s; -32768s; -144s; -32768s; -32768s; -32768s; -78s; -32768s; -41s; -108s; -107s; -32768s; -32768s; -137s; -21s; -103s; -102s; -32768s; -32768s; -32768s; -32768s; -32768s; -32768s; -170s; -42s; -167s; -32768s; -32768s; -154s; -32768s; -19s; -23s; -146s; -32768s; -140s; -138s; -36s; -71s; -105s; -71s; -32768s; -130s; -32768s; -100s; -37s; -196s; -32768s; -193s; -184s; -181s; -183s; -32768s; -32768s; -182s; -171s; -174s; -177s; -162s; -32768s; -160s; -32768s; -152s; -156s; -26s; -148s; -32768s; -32768s; -32768s; -136s; -32768s; -194s; -32768s; -32768s; -32768s; -190s; -32768s; -189s; -32768s; -176s; -178s; -179s; -180s; -153s; -32768s; -32768s; -32768s; -32768s; -32768s; -35s; -40s; -32768s; -198s; -185s; -32768s; -32768s; -186s; -188s; -173s; -159s; -32768s; -155s; -147s; -145s; -32768s; -187s; -191s; -161s; -199s |]
let gotoTable_buckets = [| -1s; 0s; 1s; 2s; -1s; 3s; -1s; -1s; -1s; -1s; -1s; 4s; 6s; 8s; 10s; 12s; 13s; 15s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; 16s; 17s; -1s; -1s; 18s; 19s; 20s; -1s; 22s; 23s; 24s; 26s; 28s; -1s; -1s; -1s; 30s; -1s; 31s; -1s; -1s; -1s; -1s; 32s; 33s; 34s; 35s; 36s; 38s; 41s; 43s; 46s; 47s; -1s; 48s; 49s; 50s; 51s; 52s; 53s; -1s; 55s; -1s; -1s; 56s; 57s; 59s; 62s; 64s; 66s; 69s; 71s; 72s; 73s; 74s; 76s; 78s; 79s; 80s; 82s; 83s; -1s; -1s; 84s; 85s; -1s; -1s; 86s; -1s; -1s; -1s; 87s; 88s; 89s; 90s; -1s; -1s; -1s; -1s; -1s; -1s; 91s; 92s; 93s; 94s; 95s; 97s; 99s; 101s; 102s; 103s; -1s; 104s; -1s; -1s; -1s; 105s; 106s; 107s; 108s; 110s; 112s; -1s; -1s; -1s; -1s; 113s; 114s; 115s; 117s; 119s; 120s; 122s; 123s; 124s; -1s; -1s; 126s; 129s; 131s; 133s; -1s; -1s; 135s; 136s; 137s; -1s; 138s; 139s; 142s; -1s; -1s; 144s; 145s; 147s; 148s; 149s; -1s; -1s; -1s; -1s; 150s; 152s; 153s; 155s; -1s; -1s; -1s; -1s; 156s; 157s; 158s; -1s; -1s; -1s; -1s; -1s; 159s; 160s; 161s; 163s; 164s; 165s; 166s; -1s; -1s; 168s; 169s; 170s; -1s; 171s; 172s; 173s; 174s; 176s; 177s; 178s; -1s; 181s; 182s; 183s; 184s; 186s; 189s; 193s; 196s; 198s; 199s; 201s; 202s; 203s; -1s; -1s; -1s; 205s; 206s; 209s; 212s; 214s; -1s; -1s; 215s; 216s; 217s; 219s; 220s; 221s; 222s; -1s; -1s; -1s; -1s; -1s; 223s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; 224s; 225s; 227s; -1s; -1s; -1s; 228s; 229s; 230s; 231s; 233s; 234s; 236s; 238s; 239s; -1s; -1s; -1s; -1s; -1s; -1s; 240s; 241s; 242s; 243s; 244s; 245s; 246s; -1s; -1s; -1s; -1s; -1s; -1s; 247s; 248s; 249s; 251s; 254s; -1s; 255s; -1s; -1s; -1s; -1s; -1s; 256s; 258s; 260s; 263s; 266s; 268s; 270s; 273s; 275s; 277s; 278s; 280s; 282s; 285s; 287s; 289s; 291s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; 293s; 294s; 295s; 296s; -1s; 297s; 298s; -1s; -1s; -1s; 299s; 300s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; 301s; 302s; 303s; 305s; 306s; 308s; 310s; 311s; 312s; 314s; -1s; -1s; -1s; 316s; 317s; 318s; 320s; 322s; 324s; 326s; 328s; 331s; 335s; 338s; 339s; 340s; -1s; 341s; -1s; -1s; -1s; 342s; 343s; -1s; -1s; -1s; -1s; 344s; 345s; 346s; 347s; 348s; 349s; 350s; 352s; 353s; 354s; -1s; 355s; 356s; 358s; 360s; 361s; -1s; -1s; 363s; 364s; 365s; 368s; 370s; 371s; 372s; -1s; -1s; -1s; -1s; 373s; 374s; 375s; 377s; 379s; 380s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; 381s; 382s; 383s; 385s; 387s; 388s; 390s; 391s; 392s; 394s; 396s; 397s; 398s; 399s; 400s; 402s; 403s; 404s; 405s; 406s; 407s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; -1s; 408s; -1s; 409s; 410s; 411s; 413s; 414s; 416s; 417s; 418s; 419s; -1s; 420s; 421s; 423s; 425s; 426s; 427s; 429s; 430s; 431s; -1s; -1s; -1s; -1s; 432s; 433s; 434s; 435s; 436s; 437s; -1s; -1s; -1s; -1s; -1s; -1s; 438s; -1s; -1s; -1s; -1s; 439s; 440s; 441s; 442s; 444s; 446s; 447s; -1s; -1s; -1s; -1s; -1s; 449s; 450s; 451s; 452s; 453s; 454s; 455s; -1s; 456s; 457s; 458s; 460s; -1s; -1s |]
let gotoTable_entries = [| 1s; 29s; 2s; 30s; 3s; 31s; 5s; 32s; -12s; 33s; 7826s; 200s; -13s; 34s; 7827s; 37s; -14s; 35s; 7828s; 38s; -15s; 36s; 7829s; 39s; 15s; 37s; -17s; 38s; 10436s; 236s; 17s; 39s; 1590s; 98s; 1591s; 99s; 1073s; 85s; 14620s; 276s; -5244s; 155s; 14621s; 167s; 1598s; 100s; 7330s; 192s; -7332s; 37s; 20877s; 351s; -7333s; 38s; 20878s; 312s; -7334s; 39s; 20879s; 313s; 6295s; 173s; 1087s; 86s; 571s; 60s; 572s; 36s; 573s; 37s; 574s; 38s; -576s; 39s; 17768s; 317s; -577s; 61s; -1619s; 102s; 17769s; 189s; -17771s; 190s; 19854s; 342s; -6831s; 181s; -17772s; 318s; 19855s; 37s; 19856s; 38s; 19857s; 39s; 11002s; 246s; 11003s; 105s; 11004s; 106s; 11005s; 107s; 11006s; 108s; -11008s; 109s; 14654s; 160s; 14656s; 277s; 14659s; 162s; -7888s; 201s; 14660s; 104s; -7889s; 36s; -14662s; 105s; 20392s; 349s; -7890s; 37s; 14662s; 106s; -7891s; 38s; 14663s; 107s; -1640s; 103s; -7892s; 39s; 14664s; 108s; -1641s; 104s; 14665s; 109s; 1641s; 105s; 1642s; 106s; 1643s; 107s; -1124s; 88s; 1644s; 108s; -1646s; 109s; 16754s; 296s; 16755s; 37s; 16756s; 38s; -5817s; 166s; 16757s; 39s; 5817s; 167s; 15196s; 283s; 18325s; 321s; 8948s; 213s; 15724s; 287s; 7392s; 193s; 7393s; 37s; 7394s; 38s; 7395s; 39s; 15217s; 103s; 15218s; 104s; 15219s; 105s; 15220s; 106s; -634s; 60s; 15221s; 107s; -635s; 36s; 15222s; 108s; -636s; 37s; 15223s; 109s; 636s; 38s; 637s; 39s; 638s; 62s; 1682s; 111s; 13669s; 266s; 13670s; 106s; 13671s; 107s; -11068s; 247s; 13672s; 108s; -11069s; 108s; 13673s; 109s; 11069s; 109s; 13158s; 260s; 13159s; 37s; -7951s; 202s; 13160s; 38s; -7952s; 37s; 13161s; 39s; 7952s; 38s; -139s; 41s; 7953s; 39s; 139s; 37s; 140s; 38s; -142s; 39s; 5351s; 157s; -6397s; 176s; -16817s; 297s; 18900s; 325s; -16818s; 37s; 18901s; 308s; -16819s; 38s; 18902s; 309s; -16820s; 39s; 21508s; 349s; 17343s; 311s; 17344s; 312s; 17345s; 313s; 15784s; 288s; -5366s; 86s; -14744s; 278s; 15785s; 189s; -1199s; 90s; 15786s; 190s; 20999s; 353s; -7455s; 194s; 21000s; 315s; 7455s; 37s; 7456s; 38s; 7457s; 39s; -10068s; 227s; 11630s; 252s; 11631s; 189s; -9028s; 214s; 11632s; 190s; 9028s; 190s; 697s; 64s; 698s; 38s; 699s; 65s; 1747s; 112s; 1748s; 34s; -708s; 66s; 1749s; 35s; 1750s; 36s; 1751s; 37s; 1752s; 38s; -1754s; 39s; 14257s; 273s; 5403s; 158s; 20513s; 350s; 20514s; 309s; 8012s; 203s; 8013s; 37s; 8014s; 38s; -201s; 42s; 8015s; 39s; 201s; 37s; 202s; 38s; -204s; 39s; -5414s; 159s; 13228s; 160s; 13230s; 261s; 9063s; 215s; 9064s; 34s; -9066s; 35s; 13233s; 162s; -9067s; 36s; -13235s; 104s; 18965s; 328s; -9068s; 37s; -13236s; 105s; -17404s; 314s; 18966s; 329s; -9069s; 38s; -13237s; 106s; 17404s; 315s; -9070s; 39s; 13237s; 107s; 13238s; 108s; -13240s; 109s; 21054s; 317s; 21055s; 189s; 21056s; 190s; -5428s; 86s; 21057s; 354s; 10120s; 228s; -7517s; 195s; -10122s; 37s; 10642s; 239s; -7518s; 37s; -10123s; 38s; 10643s; 99s; -7519s; 38s; 10123s; 39s; 7519s; 39s; 16379s; 293s; 16380s; 34s; -10651s; 100s; 16381s; 35s; 16382s; 36s; 16383s; 37s; 16384s; 38s; 16385s; 39s; 761s; 68s; 11191s; 249s; -11193s; 108s; 16923s; 298s; 11193s; 109s; 15886s; 289s; 15887s; 37s; 15888s; 38s; -8075s; 204s; 15889s; 39s; 8075s; 37s; -2867s; 41s; 8076s; 38s; -2868s; 37s; 8077s; 39s; 2868s; 38s; 2869s; 39s; 1313s; 92s; 1314s; 34s; 1315s; 35s; 1316s; 36s; 1317s; 37s; 1318s; 38s; 1319s; 39s; 7578s; 196s; 7579s; 37s; -7581s; 38s; 10706s; 242s; -809s; 69s; -7582s; 39s; 13833s; 267s; 809s; 31s; 811s; 32s; -818s; 33s; 8632s; 208s; -819s; 34s; 8633s; 37s; -820s; 35s; -4988s; 150s; 8634s; 38s; -821s; 36s; -4989s; 104s; 8635s; 39s; -822s; 37s; 4989s; 105s; -823s; 38s; 4990s; 106s; -824s; 39s; -4992s; 107s; 17495s; 316s; -4993s; 108s; 17496s; 34s; -4994s; 109s; 17497s; 35s; 17498s; 36s; -7080s; 183s; 17499s; 37s; -7081s; 34s; 17500s; 38s; -7082s; 35s; -9687s; 222s; 17501s; 39s; -7083s; 36s; 9687s; 37s; -7084s; 37s; 9688s; 38s; -7085s; 38s; 9689s; 39s; -7086s; 39s; 14900s; 280s; 8136s; 205s; 8137s; 37s; 8138s; 38s; 8139s; 39s; 10225s; 230s; 10226s; 231s; 13356s; 264s; 6063s; 170s; 20140s; 322s; 20141s; 308s; -12849s; 257s; 20142s; 309s; 12849s; 37s; -7641s; 197s; 12850s; 38s; -7642s; 37s; 12851s; 39s; 7642s; 38s; 7643s; 39s; -2435s; 133s; 20148s; 344s; -2436s; 65s; 20149s; 324s; 18590s; 322s; 18591s; 308s; -11299s; 251s; 18592s; 309s; -880s; 70s; 11299s; 37s; -881s; 34s; 11300s; 38s; -882s; 35s; 11301s; 39s; -883s; 36s; 5050s; 151s; -884s; 37s; -5052s; 105s; 7135s; 184s; -885s; 38s; -1927s; 115s; -5053s; 106s; 18598s; 323s; -886s; 39s; -5054s; 107s; 18599s; 324s; 5054s; 108s; 5055s; 109s; 5056s; 152s; 8705s; 210s; 17045s; 300s; 17046s; 231s; 10799s; 243s; 10800s; 34s; 10801s; 35s; 10802s; 36s; 10803s; 37s; 10804s; 38s; -2991s; 42s; 10805s; 39s; 2991s; 37s; 2992s; 38s; 2993s; 39s; 14978s; 281s; -14980s; 189s; 16021s; 291s; -5603s; 160s; 14980s; 190s; 21754s; 331s; -5605s; 161s; 19150s; 331s; 5607s; 162s; 5608s; 104s; -4047s; 133s; -5610s; 105s; 15508s; 284s; -4048s; 65s; 5610s; 106s; 5611s; 107s; 5612s; 108s; 5613s; 109s; 7702s; 198s; 7703s; 37s; -2495s; 134s; 7704s; 38s; -2496s; 37s; 7705s; 39s; 2496s; 38s; 2497s; 39s; 5112s; 151s; 5113s; 105s; -3552s; 68s; 5114s; 106s; -5116s; 107s; 13972s; 160s; 5116s; 108s; -5118s; 109s; 13974s; 268s; 5118s; 153s; 17102s; 307s; -13978s; 162s; 17103s; 308s; -13979s; 104s; 17104s; 309s; 13979s; 105s; 13980s; 106s; 13981s; 107s; 13982s; 108s; -13984s; 109s; 21277s; 356s; 21278s; 34s; 21279s; 35s; 21280s; 36s; 21281s; 37s; 21282s; 38s; 21283s; 39s; 974s; 72s; 7228s; 188s; 7229s; 189s; -1500s; 95s; 7230s; 190s; 1500s; 34s; -1502s; 35s; 10358s; 235s; 1502s; 36s; 1503s; 37s; 1504s; 38s; 1505s; 39s; 13490s; 265s; -10887s; 244s; 13491s; 189s; -10888s; 189s; 13492s; 190s; 10888s; 190s; 20267s; 346s; -7765s; 199s; 20268s; 329s; 7765s; 37s; 7766s; 38s; 7767s; 39s; 14024s; 269s; 14025s; 35s; 14026s; 36s; 14027s; 37s; 14028s; 38s; 14029s; 39s; 9868s; 224s; 7268s; 191s; 7269s; 37s; 7270s; 38s; -499s; 58s; 7271s; 39s; -500s; 31s; 21860s; 359s; 21861s; 189s; -502s; 32s; 21862s; 190s; 507s; 33s; 508s; 34s; 509s; 35s; 510s; 36s; 511s; 37s; 512s; 38s; 513s; 39s; 19792s; 341s; 19793s; 37s; -518s; 59s; 19794s; 38s; 19795s; 39s |]
let reductions =    [| 
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.command list * System.Collections.Generic.IDictionary<string, obj>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      failwith "unreachable"
                   )
                 : '_startProgram));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list_emptiable)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                        (List.rev _1, parseState.ParserLocalStore) 
                   )
                 : Syntax.command list * System.Collections.Generic.IDictionary<string, obj>));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                   _1 
                   )
                 : 'Command_list_emptiable));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                   [] 
                   )
                 : 'Command_list_emptiable));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            _3 :: _1 
                   )
                 : 'Command_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            make_cmd parseState (SCexpr _3) :: _1 
                   )
                 : 'Command_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            _1 :: [] 
                   )
                 : 'Command_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            make_cmd parseState (SCexpr _1) :: [] 
                   )
                 : 'Command_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         () 
                   )
                 : 'Opt_semi));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         () 
                   )
                 : 'Opt_semi));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Value_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                              make_cmd parseState (SCval _2) 
                   )
                 : 'Command));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Function_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                              make_cmd parseState (SCfun _2) 
                   )
                 : 'Command));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                              make_cmd parseState (SCvar _2) 
                   )
                 : 'Command));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                              make_cmd parseState (SCtype _2) 
                   )
                 : 'Command));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                              make_cmd parseState (SChide (_2)) 
                   )
                 : 'Command));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                              make_cmd parseState (SCremove _2) 
                   )
                 : 'Command));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                              make_cmd parseState (SCexn _2) 
                   )
                 : 'Command));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_def_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                              make_cmd parseState (SClex _3) 
                   )
                 : 'Command));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_6)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Value_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                    (_1,_2) :: _4 
                   )
                 : 'Value_def));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_6)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                    [_1,_2] 
                   )
                 : 'Value_def));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equation)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Function_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                             (_1,_2) :: _4 
                   )
                 : 'Function_def));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                             (_1,_2) :: [] 
                   )
                 : 'Function_def));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                              (_1,_2) :: _4 
                   )
                 : 'Var_def));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                              [_1,_2] 
                   )
                 : 'Var_def));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                           make_expr parseState (SEfn (_1, _2)) 
                   )
                 : 'Equation));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                  make_expr parseState (SEtype (_4,_2)) 
                   )
                 : 'Expression_def));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                  _2 
                   )
                 : 'Expression_def));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_4)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            make_expr parseState (SEtype (_1, _3)) 
                   )
                 : 'Expression_5));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_4)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            _1 
                   )
                 : 'Expression_5));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                     match _1 with [e] -> e | l -> make_expr parseState (SEtuple l) 
                   )
                 : 'Expression_4));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                        _1 :: _3 
                   )
                 : 'Expression_3_comma_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                        [_1] 
                   )
                 : 'Expression_3_comma_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_expr parseState (SEfn (_2, _4)) 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_expr parseState (SEset (_1, _3)) 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_ternop parseState ".[]<-" _1 _4 _7 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_expr parseState (SEsetfield (_1, _3, _5)) 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_expr parseState (SEifthenelse (_2, _4, Some _6)) 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_expr parseState (SEifthenelse (_2, _4, None)) 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_expr parseState (SEwhile (_2, _4)) 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Dir_flag)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_expr parseState (SEfor (_2, _4, _5, _6, _8)) 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_expr parseState (SEcase (_2, _5)) 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_expr parseState (SEtry (_2, _5)) 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_expr parseState (SEfn ([make_pat parseState (SPid "$")], make_expr parseState (SEcase (make_expr parseState (SEid "$"), _3)))) 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_minus_expr parseState _1 _2 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_unop parseState _1 _2 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_binop parseState "**" _1 _3 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_binop parseState _2 _1 _3 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_binop parseState _2 _1 _3 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_binop parseState _2 _1 _3 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_binop parseState _2 _1 _3 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_binop parseState _2 _1 _3 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_binop parseState "=" _1 _3 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_binop parseState "==" _1 _3 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_binop parseState "*" _1 _3 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_binop parseState "&&" _1 _3 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_binop parseState "||" _1 _3 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_unop parseState "::" (make_expr parseState (SEtuple [_1;_3])) 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_binop parseState ":=" _1 _3 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  make_binop parseState "<<" _1 _3 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                                                  _1 
                   )
                 : 'Expression_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                               match _1 with [e] -> e | hd :: tl -> make_expr parseState (SEapply (hd, tl)) | [] -> raise (exn()) 
                   )
                 : 'Expression_2));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            _1 :: _2 
                   )
                 : 'Expression_1_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            [_1] 
                   )
                 : 'Expression_1_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_expr parseState (SEid _1) 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_string parseState _1 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_expr parseState (SEint _1) 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_expr parseState (SEchar _1) 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_expr parseState (SEfloat _1) 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_unop parseState "!" _2 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_expr parseState (SEgetfield (_1, _3)) 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_binop parseState ".[]" _1 _4 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list_emptiable)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_begin parseState _2 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list_emptiable)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_begin parseState _2 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Operator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_ident parseState _2 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3_emptiable_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_expr parseState (SElist (LKarray, _2)) 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3_emptiable_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_expr parseState (SElist (LKlist, _2)) 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_expr parseState (SErecord (None, _2)) 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                       make_expr parseState (SErecord (Some _2, _4)) 
                   )
                 : 'Expression_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                     _1 
                   )
                 : 'Expression_3_emptiable_comma_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                     [] 
                   )
                 : 'Expression_3_emptiable_comma_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                      _1 :: _2 
                   )
                 : 'Pattern_1_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                      _1 :: [] 
                   )
                 : 'Pattern_1_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         () 
                   )
                 : 'Opt_bar));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         () 
                   )
                 : 'Opt_bar));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         _1 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         _1 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         _1 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         _1 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         "**" 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         _1 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         _1 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         "*" 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         "=" 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         "&&" 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         "||" 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         "==" 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         ":=" 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         "!" 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         "<<" 
                   )
                 : 'Operator));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_6)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_when_clause)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                               (_1, _2, _4) 
                   )
                 : 'Matching));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                               None 
                   )
                 : 'Opt_when_clause));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_4)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                               Some _2 
                   )
                 : 'Opt_when_clause));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                        _1 :: _3 
                   )
                 : 'Matching_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                        [_1] 
                   )
                 : 'Matching_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                            (_1, _3) :: _5 
                   )
                 : 'Label_expr_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                            [_1, _3] 
                   )
                 : 'Label_expr_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                    dirflag.Upto 
                   )
                 : 'Dir_flag));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                    dirflag.Downto 
                   )
                 : 'Dir_flag));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                  match _1 with [pat] -> pat | l -> make_pat parseState (SPtuple l)  
                   )
                 : 'Pattern_6));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                  _1 :: _3 
                   )
                 : 'Pattern_5_comma_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                  _1 :: [] 
                   )
                 : 'Pattern_5_comma_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_4)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                _1 
                   )
                 : 'Pattern_5));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_4)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                make_pat parseState (SPas (_1, _3)) 
                   )
                 : 'Pattern_5));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                     _1 
                   )
                 : 'Pattern_4));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_4)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                     make_pat parseState (SPor(_1, _3)) 
                   )
                 : 'Pattern_4));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            _1 
                   )
                 : 'Pattern_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            make_cons_pat parseState _1 _3 
                   )
                 : 'Pattern_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                             _1 
                   )
                 : 'Pattern_2));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                             make_pat parseState (SPapply (_1, _2)) 
                   )
                 : 'Pattern_2));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                    make_pat parseState (SPid _1) 
                   )
                 : 'Pattern_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                    make_pat parseState SPany 
                   )
                 : 'Pattern_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                    make_pat_string parseState _1 
                   )
                 : 'Pattern_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                    make_pat parseState (SPint _1) 
                   )
                 : 'Pattern_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                    make_pat parseState (SPchar _1) 
                   )
                 : 'Pattern_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                    make_pat parseState (SPfloat _1) 
                   )
                 : 'Pattern_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                    make_pat parseState (SPint(make_minus _2)) 
                   )
                 : 'Pattern_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                    make_pat parseState (SPfloat(- _2)) 
                   )
                 : 'Pattern_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                    make_pat parseState (SPtuple []) 
                   )
                 : 'Pattern_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_6)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                    _2 
                   )
                 : 'Pattern_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_6)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                    make_pat parseState (SPtype (_2, _4)) 
                   )
                 : 'Pattern_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5_emptiable_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                    make_pat parseState (SPlist (LKlist, _2)) 
                   )
                 : 'Pattern_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5_emptiable_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                    make_pat parseState (SPlist (LKarray, _2)) 
                   )
                 : 'Pattern_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_pattern_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                    make_pat parseState (SPrecord _2) 
                   )
                 : 'Pattern_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                  _1 
                   )
                 : 'Pattern_5_emptiable_comma_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                  [] 
                   )
                 : 'Pattern_5_emptiable_comma_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_pattern_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                            (_1, _3) :: _5 
                   )
                 : 'Label_pattern_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                            (_1, _3) :: [] 
                   )
                 : 'Label_pattern_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_1_star_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                            make_typ parseState (STarrow(type_expr_of_type_star_list parseState _1, _3)) 
                   )
                 : 'Type_expr_2));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_1_star_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                            type_expr_of_type_star_list parseState _1 
                   )
                 : 'Type_expr_2));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_1_star_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                    _3 :: _1 
                   )
                 : 'Type_expr_1_star_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                    [_1] 
                   )
                 : 'Type_expr_1_star_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                          make_typ parseState (STvar _1) 
                   )
                 : 'Type_expr_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                          mark_as_typename parseState 1; make_typ parseState (STconstr(_1, [])) 
                   )
                 : 'Type_expr_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_1)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                          mark_as_typename parseState 2; make_typ parseState (STconstr(_2, [_1])) 
                   )
                 : 'Type_expr_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2_comma_list)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                          mark_as_typename parseState 6; make_typ parseState (STconstr(_6, _2 :: _4)) 
                   )
                 : 'Type_expr_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                                          _2 
                   )
                 : 'Type_expr_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                      _1 :: _3 
                   )
                 : 'Type_expr_2_comma_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                      [_1] 
                   )
                 : 'Type_expr_2_comma_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                      _1 :: _3 
                   )
                 : 'Typedef_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                      [_1] 
                   )
                 : 'Typedef_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_params)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            mark_as_typename parseState 2; make_typedef parseState _1 _2 _3 
                   )
                 : 'Typedef));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            SKvariant _3 
                   )
                 : 'Typedef_decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            SKrecord _3 
                   )
                 : 'Typedef_decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            SKabbrev _2 
                   )
                 : 'Typedef_decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                          _1 :: _3 
                   )
                 : 'Constr_decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                          [_1] 
                   )
                 : 'Constr_decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_1_star_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            (_1, List.rev _3) 
                   )
                 : 'Constr1_decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            (_1, []) 
                   )
                 : 'Constr1_decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label1_decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                          _1 :: _3 
                   )
                 : 'Label_decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                          [_1] 
                   )
                 : 'Label_decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_mutable)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                 (_2, _4, _1) 
                   )
                 : 'Label1_decl));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         access.Mutable 
                   )
                 : 'Opt_mutable));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                         access.Immutable 
                   )
                 : 'Opt_mutable));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                         _2 
                   )
                 : 'Type_params));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                         [_1] 
                   )
                 : 'Type_params));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                         [] 
                   )
                 : 'Type_params));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                        _1 :: _3 
                   )
                 : 'Type_var_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                        [_1] 
                   )
                 : 'Type_var_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                               [] 
                   )
                 : 'Lexer_def_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_def)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_def_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                               _1 :: _3 
                   )
                 : 'Lexer_def_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            Macro_def (_2, _4) 
                   )
                 : 'Lexer_def));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            Rules_def _2 
                   )
                 : 'Lexer_def));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                               Alt [_1;_3]  
                   )
                 : 'Lexer_regexp_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                               _1 
                   )
                 : 'Lexer_regexp_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                               Seq [] 
                   )
                 : 'Lexer_regexp_3));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_2)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                           Seq [_1; _2] 
                   )
                 : 'Lexer_regexp_2));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                           _1 
                   )
                 : 'Lexer_regexp_2));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_1)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                         Seq[_1;Star _1] 
                   )
                 : 'Lexer_regexp_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                         Star _1 
                   )
                 : 'Lexer_regexp_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                         Alt[Seq[];_1] 
                   )
                 : 'Lexer_regexp_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                         Inp (Alphabet (int _1)) 
                   )
                 : 'Lexer_regexp_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                         Inp Any 
                   )
                 : 'Lexer_regexp_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                         Seq ([for c in _1 -> Inp (Alphabet (int c))]) 
                   )
                 : 'Lexer_regexp_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                         Macro _1 
                   )
                 : 'Lexer_regexp_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                         _2 
                   )
                 : 'Lexer_regexp_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                         Alt ([for c in _2 -> Inp (Alphabet c)]) 
                   )
                 : 'Lexer_regexp_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                         Inp(NotCharSet(_3)) 
                   )
                 : 'Lexer_regexp_1));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                              Set.union _1 _2 
                   )
                 : 'Lexer_charset_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                              _1 
                   )
                 : 'Lexer_charset_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                   Set.singleton (int _1) 
                   )
                 : 'Lexer_charset));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                   Set.ofSeq [ for c in _1 .. _3 -> int c ] 
                   )
                 : 'Lexer_charset));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            [_1] 
                   )
                 : 'Lexer_rule_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                            _1 :: _3 
                   )
                 : 'Lexer_rule_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_args)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_case_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                              (_1, _2, _4, get_loc parseState) 
                   )
                 : 'Lexer_rule));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                   [] 
                   )
                 : 'Lexer_rule_args));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                   _1 :: _2 
                   )
                 : 'Lexer_rule_args));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                  [] 
                   )
                 : 'Lexer_rule_case_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_case)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_case_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                  _1 :: _2 
                   )
                 : 'Lexer_rule_case_list));
        (fun (parseState : FsLexYaccLite.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                                                                       (_1, _3) 
                   )
                 : 'Lexer_rule_case));
|]
let terminalsCount = 72
let nonTerminalsCount = 62
let tables = FsLexYaccLite.Parsing.Tables(reductions, endOfInputTag, tagOfToken, dataOfToken, reductionSymbolCounts, productionToNonTerminalTable, maxProductionBodyLength, gotoTable_buckets, gotoTable_entries, nonTerminalsCount, actionTable_buckets, actionTable_entries, actionTable_defaultActions, terminalsCount)
let Program lexer lexbuf : Syntax.command list * System.Collections.Generic.IDictionary<string, obj> = unbox (tables.Interpret(lexer, lexbuf, 0))
