
val ciDefault = { ciForeColor = None, ciBackColor = None, ciUnderlineColor = None, ciText = None };
val ciError = { ciDefault with ciUnderlineColor = Some (colorOfRgb 0xFF0000) };
val ciHighlighted = { ciDefault with ciForeColor = Some (colorOfRgb 0x00FF00), ciBackColor = Some (colorOfRgb 0x000000) };

val highlightingKeywords = [||];

fun highlightKeyword (keyword : string) (ci : colorInfo) (text : string) (colors : colorInfo array) =
    begin
        val keyLen = stringLength keyword;
        var i = stringIndexOf text keyword 0;
        while i <> -1 do
            begin
              arrayFill colors i keyLen ci;
              i <- stringIndexOf text keyword (i + (stringLength keyword));
            end;
    end;

malproc <-
  (fn (msg : message) ->
    case msg of
    | MhighlightingRequired editor ->
        begin
            sei();
            val filename = editorGetFilename editor;
            val extension = stringToLower (pathGetExtension filename);
            val s = editorGetText editor;
            val accu = arrayCreate (stringLength s) ciDefault;
            if extension = ".mal" then
                malHighlight s accu;
            for i = 0 to arrayLength highlightingKeywords - 1 do
                highlightKeyword highlightingKeywords.[i] ciHighlighted s accu;
            editorSetColor editor accu
        end
    | MkeyDown (e, { kdKey = Kenter }) ->
        begin
          val sel = editorGetSelection e;
          val lineIndex = editorGetLineIndexFromCharPos e sel.sCaretPos;
          val lineRange = editorGetLineRange e lineIndex;
          val lineString = editorGetTextFromRange e lineRange;
          val m = regexMatch lineString @"\A[\t\s]*" 0;
          editorInput e (editorGetNewlineString e ^ matchGetValue m);
		  editorSetRevisionSealed e;
        end
    | MkeyDown (e, { kdKey = Ktab }) ->
        begin
          editorInput e "    ";
		  editorSetRevisionSealed e;
        end
    | MkeyDown (e, kd) -> editorDefaultKeyDown e kd);

fun initiateHighlighting() = arrayIter editorInitiateHighlighting (getEditors());

fun hlt (keyword : string) =
    begin
        highlightingKeywords << keyword;
        initiateHighlighting()
    end;

fun clr() =
    begin
        arrayClear highlightingKeywords;
        initiateHighlighting()
    end;

initiateHighlighting()